/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spoonacular;

import com.spoonacular.client.ApiInvoker;
import com.spoonacular.client.ApiException;
import com.spoonacular.client.Pair;

import com.spoonacular.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import com.spoonacular.client.model.AddMealPlanTemplate200Response;
import com.spoonacular.client.model.AddToMealPlanRequest;
import com.spoonacular.client.model.AddToMealPlanRequest1;
import com.spoonacular.client.model.AddToShoppingListRequest;
import java.math.BigDecimal;
import com.spoonacular.client.model.ClearMealPlanDayRequest;
import com.spoonacular.client.model.ConnectUser200Response;
import com.spoonacular.client.model.ConnectUserRequest;
import com.spoonacular.client.model.DeleteFromMealPlanRequest;
import com.spoonacular.client.model.GenerateMealPlan200Response;
import com.spoonacular.client.model.GenerateShoppingList200Response;
import com.spoonacular.client.model.GenerateShoppingListRequest;
import com.spoonacular.client.model.GetMealPlanTemplate200Response;
import com.spoonacular.client.model.GetMealPlanTemplates200Response;
import com.spoonacular.client.model.GetMealPlanWeek200Response;
import com.spoonacular.client.model.GetShoppingList200Response;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MealPlanningApi {
  String basePath = "https://api.spoonacular.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Add Meal Plan Template
  * Add a meal plan template for a user.
   * @param username The username.
   * @param hash The private hash for the username.
   * @param addToMealPlanRequest 
   * @return AddMealPlanTemplate200Response
  */
  public AddMealPlanTemplate200Response addMealPlanTemplate (String username, String hash, AddToMealPlanRequest addToMealPlanRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = addToMealPlanRequest;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling addMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'username' when calling addMealPlanTemplate"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling addMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'hash' when calling addMealPlanTemplate"));
    }
    // verify the required parameter 'addToMealPlanRequest' is set
    if (addToMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addToMealPlanRequest' when calling addMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'addToMealPlanRequest' when calling addMealPlanTemplate"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/templates".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AddMealPlanTemplate200Response) ApiInvoker.deserialize(localVarResponse, "", AddMealPlanTemplate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add Meal Plan Template
   * Add a meal plan template for a user.
   * @param username The username.   * @param hash The private hash for the username.   * @param addToMealPlanRequest 
  */
  public void addMealPlanTemplate (String username, String hash, AddToMealPlanRequest addToMealPlanRequest, final Response.Listener<AddMealPlanTemplate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = addToMealPlanRequest;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling addMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'username' when calling addMealPlanTemplate"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling addMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'hash' when calling addMealPlanTemplate"));
    }
    // verify the required parameter 'addToMealPlanRequest' is set
    if (addToMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addToMealPlanRequest' when calling addMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'addToMealPlanRequest' when calling addMealPlanTemplate"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/templates".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AddMealPlanTemplate200Response) ApiInvoker.deserialize(localVarResponse,  "", AddMealPlanTemplate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add to Meal Plan
  * Add an item to the user&#39;s meal plan.
   * @param username The username.
   * @param hash The private hash for the username.
   * @param addToMealPlanRequest 
   * @return Object
  */
  public Object addToMealPlan (String username, String hash, AddToMealPlanRequest addToMealPlanRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = addToMealPlanRequest;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling addToMealPlan",
        new ApiException(400, "Missing the required parameter 'username' when calling addToMealPlan"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling addToMealPlan",
        new ApiException(400, "Missing the required parameter 'hash' when calling addToMealPlan"));
    }
    // verify the required parameter 'addToMealPlanRequest' is set
    if (addToMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addToMealPlanRequest' when calling addToMealPlan",
        new ApiException(400, "Missing the required parameter 'addToMealPlanRequest' when calling addToMealPlan"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/items".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
      "",
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add to Meal Plan
   * Add an item to the user&#39;s meal plan.
   * @param username The username.   * @param hash The private hash for the username.   * @param addToMealPlanRequest 
  */
  public void addToMealPlan (String username, String hash, AddToMealPlanRequest addToMealPlanRequest, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = addToMealPlanRequest;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling addToMealPlan",
        new ApiException(400, "Missing the required parameter 'username' when calling addToMealPlan"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling addToMealPlan",
        new ApiException(400, "Missing the required parameter 'hash' when calling addToMealPlan"));
    }
    // verify the required parameter 'addToMealPlanRequest' is set
    if (addToMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addToMealPlanRequest' when calling addToMealPlan",
        new ApiException(400, "Missing the required parameter 'addToMealPlanRequest' when calling addToMealPlan"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/items".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      "","application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add to Shopping List
  * Add an item to the current shopping list of a user.
   * @param username The username.
   * @param hash The private hash for the username.
   * @param addToMealPlanRequest 
   * @return GenerateShoppingList200Response
  */
  public GenerateShoppingList200Response addToShoppingList (String username, String hash, AddToMealPlanRequest addToMealPlanRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = addToMealPlanRequest;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling addToShoppingList",
        new ApiException(400, "Missing the required parameter 'username' when calling addToShoppingList"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling addToShoppingList",
        new ApiException(400, "Missing the required parameter 'hash' when calling addToShoppingList"));
    }
    // verify the required parameter 'addToMealPlanRequest' is set
    if (addToMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addToMealPlanRequest' when calling addToShoppingList",
        new ApiException(400, "Missing the required parameter 'addToMealPlanRequest' when calling addToShoppingList"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/shopping-list/items".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
      "",
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateShoppingList200Response) ApiInvoker.deserialize(localVarResponse, "", GenerateShoppingList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add to Shopping List
   * Add an item to the current shopping list of a user.
   * @param username The username.   * @param hash The private hash for the username.   * @param addToMealPlanRequest 
  */
  public void addToShoppingList (String username, String hash, AddToMealPlanRequest addToMealPlanRequest, final Response.Listener<GenerateShoppingList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = addToMealPlanRequest;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling addToShoppingList",
        new ApiException(400, "Missing the required parameter 'username' when calling addToShoppingList"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling addToShoppingList",
        new ApiException(400, "Missing the required parameter 'hash' when calling addToShoppingList"));
    }
    // verify the required parameter 'addToMealPlanRequest' is set
    if (addToMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addToMealPlanRequest' when calling addToShoppingList",
        new ApiException(400, "Missing the required parameter 'addToMealPlanRequest' when calling addToShoppingList"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/shopping-list/items".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      "","application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateShoppingList200Response) ApiInvoker.deserialize(localVarResponse,  "", GenerateShoppingList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Clear Meal Plan Day
  * Delete all planned items from the user&#39;s meal plan for a specific day.
   * @param username The username.
   * @param date The date in the format yyyy-mm-dd.
   * @param hash The private hash for the username.
   * @param clearMealPlanDayRequest 
   * @return Object
  */
  public Object clearMealPlanDay (String username, String date, String hash, ClearMealPlanDayRequest clearMealPlanDayRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = clearMealPlanDayRequest;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling clearMealPlanDay",
        new ApiException(400, "Missing the required parameter 'username' when calling clearMealPlanDay"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling clearMealPlanDay",
        new ApiException(400, "Missing the required parameter 'date' when calling clearMealPlanDay"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling clearMealPlanDay",
        new ApiException(400, "Missing the required parameter 'hash' when calling clearMealPlanDay"));
    }
    // verify the required parameter 'clearMealPlanDayRequest' is set
    if (clearMealPlanDayRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clearMealPlanDayRequest' when calling clearMealPlanDay",
        new ApiException(400, "Missing the required parameter 'clearMealPlanDayRequest' when calling clearMealPlanDay"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/day/{date}".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "date" + "\\}", apiInvoker.escapeString(date.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Clear Meal Plan Day
   * Delete all planned items from the user&#39;s meal plan for a specific day.
   * @param username The username.   * @param date The date in the format yyyy-mm-dd.   * @param hash The private hash for the username.   * @param clearMealPlanDayRequest 
  */
  public void clearMealPlanDay (String username, String date, String hash, ClearMealPlanDayRequest clearMealPlanDayRequest, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = clearMealPlanDayRequest;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling clearMealPlanDay",
        new ApiException(400, "Missing the required parameter 'username' when calling clearMealPlanDay"));
    }
    // verify the required parameter 'date' is set
    if (date == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'date' when calling clearMealPlanDay",
        new ApiException(400, "Missing the required parameter 'date' when calling clearMealPlanDay"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling clearMealPlanDay",
        new ApiException(400, "Missing the required parameter 'hash' when calling clearMealPlanDay"));
    }
    // verify the required parameter 'clearMealPlanDayRequest' is set
    if (clearMealPlanDayRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clearMealPlanDayRequest' when calling clearMealPlanDay",
        new ApiException(400, "Missing the required parameter 'clearMealPlanDayRequest' when calling clearMealPlanDay"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/day/{date}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "date" + "\\}", apiInvoker.escapeString(date.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Connect User
  * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
   * @param body 
   * @return ConnectUser200Response
  */
  public ConnectUser200Response connectUser (Object body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling connectUser",
        new ApiException(400, "Missing the required parameter 'body' when calling connectUser"));
    }

    // create path and map variables
    String path = "/users/connect";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "",
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ConnectUser200Response) ApiInvoker.deserialize(localVarResponse, "", ConnectUser200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Connect User
   * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
   * @param body 
  */
  public void connectUser (Object body, final Response.Listener<ConnectUser200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling connectUser",
        new ApiException(400, "Missing the required parameter 'body' when calling connectUser"));
    }

    // create path and map variables
    String path = "/users/connect".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "","application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ConnectUser200Response) ApiInvoker.deserialize(localVarResponse,  "", ConnectUser200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete from Meal Plan
  * Delete an item from the user&#39;s meal plan.
   * @param username The username.
   * @param id The shopping list item id.
   * @param hash The private hash for the username.
   * @param deleteFromMealPlanRequest 
   * @return Object
  */
  public Object deleteFromMealPlan (String username, BigDecimal id, String hash, DeleteFromMealPlanRequest deleteFromMealPlanRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deleteFromMealPlanRequest;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling deleteFromMealPlan",
        new ApiException(400, "Missing the required parameter 'username' when calling deleteFromMealPlan"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteFromMealPlan",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteFromMealPlan"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling deleteFromMealPlan",
        new ApiException(400, "Missing the required parameter 'hash' when calling deleteFromMealPlan"));
    }
    // verify the required parameter 'deleteFromMealPlanRequest' is set
    if (deleteFromMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteFromMealPlan",
        new ApiException(400, "Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteFromMealPlan"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/items/{id}".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete from Meal Plan
   * Delete an item from the user&#39;s meal plan.
   * @param username The username.   * @param id The shopping list item id.   * @param hash The private hash for the username.   * @param deleteFromMealPlanRequest 
  */
  public void deleteFromMealPlan (String username, BigDecimal id, String hash, DeleteFromMealPlanRequest deleteFromMealPlanRequest, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deleteFromMealPlanRequest;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling deleteFromMealPlan",
        new ApiException(400, "Missing the required parameter 'username' when calling deleteFromMealPlan"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteFromMealPlan",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteFromMealPlan"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling deleteFromMealPlan",
        new ApiException(400, "Missing the required parameter 'hash' when calling deleteFromMealPlan"));
    }
    // verify the required parameter 'deleteFromMealPlanRequest' is set
    if (deleteFromMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteFromMealPlan",
        new ApiException(400, "Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteFromMealPlan"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/items/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete from Shopping List
  * Delete an item from the current shopping list of the user.
   * @param username The username.
   * @param id The item&#39;s id.
   * @param hash The private hash for the username.
   * @param deleteFromMealPlanRequest 
   * @return Object
  */
  public Object deleteFromShoppingList (String username, Integer id, String hash, DeleteFromMealPlanRequest deleteFromMealPlanRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deleteFromMealPlanRequest;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling deleteFromShoppingList",
        new ApiException(400, "Missing the required parameter 'username' when calling deleteFromShoppingList"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteFromShoppingList",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteFromShoppingList"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling deleteFromShoppingList",
        new ApiException(400, "Missing the required parameter 'hash' when calling deleteFromShoppingList"));
    }
    // verify the required parameter 'deleteFromMealPlanRequest' is set
    if (deleteFromMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteFromShoppingList",
        new ApiException(400, "Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteFromShoppingList"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/shopping-list/items/{id}".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete from Shopping List
   * Delete an item from the current shopping list of the user.
   * @param username The username.   * @param id The item&#39;s id.   * @param hash The private hash for the username.   * @param deleteFromMealPlanRequest 
  */
  public void deleteFromShoppingList (String username, Integer id, String hash, DeleteFromMealPlanRequest deleteFromMealPlanRequest, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deleteFromMealPlanRequest;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling deleteFromShoppingList",
        new ApiException(400, "Missing the required parameter 'username' when calling deleteFromShoppingList"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteFromShoppingList",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteFromShoppingList"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling deleteFromShoppingList",
        new ApiException(400, "Missing the required parameter 'hash' when calling deleteFromShoppingList"));
    }
    // verify the required parameter 'deleteFromMealPlanRequest' is set
    if (deleteFromMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteFromShoppingList",
        new ApiException(400, "Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteFromShoppingList"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/shopping-list/items/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Meal Plan Template
  * Delete a meal plan template for a user.
   * @param username The username.
   * @param id The item&#39;s id.
   * @param hash The private hash for the username.
   * @param deleteFromMealPlanRequest 
   * @return Object
  */
  public Object deleteMealPlanTemplate (String username, Integer id, String hash, DeleteFromMealPlanRequest deleteFromMealPlanRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = deleteFromMealPlanRequest;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling deleteMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'username' when calling deleteMealPlanTemplate"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteMealPlanTemplate"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling deleteMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'hash' when calling deleteMealPlanTemplate"));
    }
    // verify the required parameter 'deleteFromMealPlanRequest' is set
    if (deleteFromMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteMealPlanTemplate"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/templates/{id}".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Meal Plan Template
   * Delete a meal plan template for a user.
   * @param username The username.   * @param id The item&#39;s id.   * @param hash The private hash for the username.   * @param deleteFromMealPlanRequest 
  */
  public void deleteMealPlanTemplate (String username, Integer id, String hash, DeleteFromMealPlanRequest deleteFromMealPlanRequest, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = deleteFromMealPlanRequest;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling deleteMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'username' when calling deleteMealPlanTemplate"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteMealPlanTemplate"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling deleteMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'hash' when calling deleteMealPlanTemplate"));
    }
    // verify the required parameter 'deleteFromMealPlanRequest' is set
    if (deleteFromMealPlanRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'deleteFromMealPlanRequest' when calling deleteMealPlanTemplate"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/templates/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Generate Meal Plan
  * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
   * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
   * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
   * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
   * @param exclude A comma-separated list of allergens or ingredients that must be excluded.
   * @return GenerateMealPlan200Response
  */
  public GenerateMealPlan200Response generateMealPlan (String timeFrame, BigDecimal targetCalories, String diet, String exclude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/mealplanner/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "timeFrame", timeFrame));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "targetCalories", targetCalories));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "diet", diet));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateMealPlan200Response) ApiInvoker.deserialize(localVarResponse, "", GenerateMealPlan200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Generate Meal Plan
   * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
   * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.   * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.   * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.   * @param exclude A comma-separated list of allergens or ingredients that must be excluded.
  */
  public void generateMealPlan (String timeFrame, BigDecimal targetCalories, String diet, String exclude, final Response.Listener<GenerateMealPlan200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/mealplanner/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "timeFrame", timeFrame));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "targetCalories", targetCalories));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "diet", diet));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateMealPlan200Response) ApiInvoker.deserialize(localVarResponse,  "", GenerateMealPlan200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Generate Shopping List
  * Generate the shopping list for a user from the meal planner in a given time frame.
   * @param username The username.
   * @param startDate The start date in the format yyyy-mm-dd.
   * @param endDate The end date in the format yyyy-mm-dd.
   * @param hash The private hash for the username.
   * @param generateShoppingListRequest 
   * @return GenerateShoppingList200Response
  */
  public GenerateShoppingList200Response generateShoppingList (String username, String startDate, String endDate, String hash, GenerateShoppingListRequest generateShoppingListRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateShoppingListRequest;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling generateShoppingList",
        new ApiException(400, "Missing the required parameter 'username' when calling generateShoppingList"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling generateShoppingList",
        new ApiException(400, "Missing the required parameter 'startDate' when calling generateShoppingList"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling generateShoppingList",
        new ApiException(400, "Missing the required parameter 'endDate' when calling generateShoppingList"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling generateShoppingList",
        new ApiException(400, "Missing the required parameter 'hash' when calling generateShoppingList"));
    }
    // verify the required parameter 'generateShoppingListRequest' is set
    if (generateShoppingListRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateShoppingListRequest' when calling generateShoppingList",
        new ApiException(400, "Missing the required parameter 'generateShoppingListRequest' when calling generateShoppingList"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/shopping-list/{start-date}/{end-date}".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "start-date" + "\\}", apiInvoker.escapeString(startDate.toString())).replaceAll("\\{" + "end-date" + "\\}", apiInvoker.escapeString(endDate.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateShoppingList200Response) ApiInvoker.deserialize(localVarResponse, "", GenerateShoppingList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Generate Shopping List
   * Generate the shopping list for a user from the meal planner in a given time frame.
   * @param username The username.   * @param startDate The start date in the format yyyy-mm-dd.   * @param endDate The end date in the format yyyy-mm-dd.   * @param hash The private hash for the username.   * @param generateShoppingListRequest 
  */
  public void generateShoppingList (String username, String startDate, String endDate, String hash, GenerateShoppingListRequest generateShoppingListRequest, final Response.Listener<GenerateShoppingList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateShoppingListRequest;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling generateShoppingList",
        new ApiException(400, "Missing the required parameter 'username' when calling generateShoppingList"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling generateShoppingList",
        new ApiException(400, "Missing the required parameter 'startDate' when calling generateShoppingList"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'endDate' when calling generateShoppingList",
        new ApiException(400, "Missing the required parameter 'endDate' when calling generateShoppingList"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling generateShoppingList",
        new ApiException(400, "Missing the required parameter 'hash' when calling generateShoppingList"));
    }
    // verify the required parameter 'generateShoppingListRequest' is set
    if (generateShoppingListRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateShoppingListRequest' when calling generateShoppingList",
        new ApiException(400, "Missing the required parameter 'generateShoppingListRequest' when calling generateShoppingList"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/shopping-list/{start-date}/{end-date}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "start-date" + "\\}", apiInvoker.escapeString(startDate.toString())).replaceAll("\\{" + "end-date" + "\\}", apiInvoker.escapeString(endDate.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      ""
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateShoppingList200Response) ApiInvoker.deserialize(localVarResponse,  "", GenerateShoppingList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Meal Plan Template
  * Get information about a meal plan template.
   * @param username The username.
   * @param id The item&#39;s id.
   * @param hash The private hash for the username.
   * @return GetMealPlanTemplate200Response
  */
  public GetMealPlanTemplate200Response getMealPlanTemplate (String username, Integer id, String hash) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'username' when calling getMealPlanTemplate"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'id' when calling getMealPlanTemplate"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling getMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'hash' when calling getMealPlanTemplate"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/templates/{id}".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetMealPlanTemplate200Response) ApiInvoker.deserialize(localVarResponse, "", GetMealPlanTemplate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Meal Plan Template
   * Get information about a meal plan template.
   * @param username The username.   * @param id The item&#39;s id.   * @param hash The private hash for the username.
  */
  public void getMealPlanTemplate (String username, Integer id, String hash, final Response.Listener<GetMealPlanTemplate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'username' when calling getMealPlanTemplate"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'id' when calling getMealPlanTemplate"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling getMealPlanTemplate",
        new ApiException(400, "Missing the required parameter 'hash' when calling getMealPlanTemplate"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/templates/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetMealPlanTemplate200Response) ApiInvoker.deserialize(localVarResponse,  "", GetMealPlanTemplate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Meal Plan Templates
  * Get meal plan templates from user or public ones.
   * @param username The username.
   * @param hash The private hash for the username.
   * @return GetMealPlanTemplates200Response
  */
  public GetMealPlanTemplates200Response getMealPlanTemplates (String username, String hash) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getMealPlanTemplates",
        new ApiException(400, "Missing the required parameter 'username' when calling getMealPlanTemplates"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling getMealPlanTemplates",
        new ApiException(400, "Missing the required parameter 'hash' when calling getMealPlanTemplates"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/templates".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetMealPlanTemplates200Response) ApiInvoker.deserialize(localVarResponse, "", GetMealPlanTemplates200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Meal Plan Templates
   * Get meal plan templates from user or public ones.
   * @param username The username.   * @param hash The private hash for the username.
  */
  public void getMealPlanTemplates (String username, String hash, final Response.Listener<GetMealPlanTemplates200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getMealPlanTemplates",
        new ApiException(400, "Missing the required parameter 'username' when calling getMealPlanTemplates"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling getMealPlanTemplates",
        new ApiException(400, "Missing the required parameter 'hash' when calling getMealPlanTemplates"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/templates".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetMealPlanTemplates200Response) ApiInvoker.deserialize(localVarResponse,  "", GetMealPlanTemplates200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Meal Plan Week
  * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
   * @param username The username.
   * @param startDate The start date of the meal planned week in the format yyyy-mm-dd.
   * @param hash The private hash for the username.
   * @return GetMealPlanWeek200Response
  */
  public GetMealPlanWeek200Response getMealPlanWeek (String username, String startDate, String hash) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getMealPlanWeek",
        new ApiException(400, "Missing the required parameter 'username' when calling getMealPlanWeek"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getMealPlanWeek",
        new ApiException(400, "Missing the required parameter 'startDate' when calling getMealPlanWeek"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling getMealPlanWeek",
        new ApiException(400, "Missing the required parameter 'hash' when calling getMealPlanWeek"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/week/{start-date}".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "start-date" + "\\}", apiInvoker.escapeString(startDate.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetMealPlanWeek200Response) ApiInvoker.deserialize(localVarResponse, "", GetMealPlanWeek200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Meal Plan Week
   * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
   * @param username The username.   * @param startDate The start date of the meal planned week in the format yyyy-mm-dd.   * @param hash The private hash for the username.
  */
  public void getMealPlanWeek (String username, String startDate, String hash, final Response.Listener<GetMealPlanWeek200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getMealPlanWeek",
        new ApiException(400, "Missing the required parameter 'username' when calling getMealPlanWeek"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'startDate' when calling getMealPlanWeek",
        new ApiException(400, "Missing the required parameter 'startDate' when calling getMealPlanWeek"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling getMealPlanWeek",
        new ApiException(400, "Missing the required parameter 'hash' when calling getMealPlanWeek"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/week/{start-date}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString())).replaceAll("\\{" + "start-date" + "\\}", apiInvoker.escapeString(startDate.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetMealPlanWeek200Response) ApiInvoker.deserialize(localVarResponse,  "", GetMealPlanWeek200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Shopping List
  * Get the current shopping list for the given user.
   * @param username The username.
   * @param hash The private hash for the username.
   * @return GetShoppingList200Response
  */
  public GetShoppingList200Response getShoppingList (String username, String hash) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getShoppingList",
        new ApiException(400, "Missing the required parameter 'username' when calling getShoppingList"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling getShoppingList",
        new ApiException(400, "Missing the required parameter 'hash' when calling getShoppingList"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/shopping-list".replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetShoppingList200Response) ApiInvoker.deserialize(localVarResponse, "", GetShoppingList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Shopping List
   * Get the current shopping list for the given user.
   * @param username The username.   * @param hash The private hash for the username.
  */
  public void getShoppingList (String username, String hash, final Response.Listener<GetShoppingList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'username' is set
    if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling getShoppingList",
        new ApiException(400, "Missing the required parameter 'username' when calling getShoppingList"));
    }
    // verify the required parameter 'hash' is set
    if (hash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hash' when calling getShoppingList",
        new ApiException(400, "Missing the required parameter 'hash' when calling getShoppingList"));
    }

    // create path and map variables
    String path = "/mealplanner/{username}/shopping-list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "username" + "\\}", apiInvoker.escapeString(username.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "hash", hash));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetShoppingList200Response) ApiInvoker.deserialize(localVarResponse,  "", GetShoppingList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
