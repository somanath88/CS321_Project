/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spoonacular;

import com.spoonacular.client.ApiInvoker;
import com.spoonacular.client.ApiException;
import com.spoonacular.client.Pair;

import com.spoonacular.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import com.spoonacular.client.model.AutocompleteProductSearch200Response;
import java.math.BigDecimal;
import com.spoonacular.client.model.ClassifyGroceryProduct200Response;
import com.spoonacular.client.model.ClassifyGroceryProductBulk200ResponseInner;
import com.spoonacular.client.model.ClassifyGroceryProductBulkRequestInner;
import com.spoonacular.client.model.ClassifyGroceryProductRequest;
import com.spoonacular.client.model.GetComparableProducts200Response;
import com.spoonacular.client.model.GetProductInformation200Response;
import com.spoonacular.client.model.SearchGroceryProducts200Response;
import com.spoonacular.client.model.SearchGroceryProductsByUPC200Response;
import java.util.*;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ProductsApi {
  String basePath = "https://api.spoonacular.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Autocomplete Product Search
  * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
   * @param query The (partial) search query.
   * @param number The number of results to return (between 1 and 25).
   * @return AutocompleteProductSearch200Response
  */
  public AutocompleteProductSearch200Response autocompleteProductSearch (String query, Integer number) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'query' is set
    if (query == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'query' when calling autocompleteProductSearch",
        new ApiException(400, "Missing the required parameter 'query' when calling autocompleteProductSearch"));
    }

    // create path and map variables
    String path = "/food/products/suggest";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AutocompleteProductSearch200Response) ApiInvoker.deserialize(localVarResponse, "", AutocompleteProductSearch200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Autocomplete Product Search
   * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
   * @param query The (partial) search query.   * @param number The number of results to return (between 1 and 25).
  */
  public void autocompleteProductSearch (String query, Integer number, final Response.Listener<AutocompleteProductSearch200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'query' is set
    if (query == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'query' when calling autocompleteProductSearch",
        new ApiException(400, "Missing the required parameter 'query' when calling autocompleteProductSearch"));
    }

    // create path and map variables
    String path = "/food/products/suggest".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AutocompleteProductSearch200Response) ApiInvoker.deserialize(localVarResponse,  "", AutocompleteProductSearch200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Classify Grocery Product
  * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
   * @param classifyGroceryProductRequest 
   * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
   * @return ClassifyGroceryProduct200Response
  */
  public ClassifyGroceryProduct200Response classifyGroceryProduct (ClassifyGroceryProductRequest classifyGroceryProductRequest, String locale) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = classifyGroceryProductRequest;
    // verify the required parameter 'classifyGroceryProductRequest' is set
    if (classifyGroceryProductRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'classifyGroceryProductRequest' when calling classifyGroceryProduct",
        new ApiException(400, "Missing the required parameter 'classifyGroceryProductRequest' when calling classifyGroceryProduct"));
    }

    // create path and map variables
    String path = "/food/products/classify";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "locale", locale));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ClassifyGroceryProduct200Response) ApiInvoker.deserialize(localVarResponse, "", ClassifyGroceryProduct200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Classify Grocery Product
   * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
   * @param classifyGroceryProductRequest    * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
  */
  public void classifyGroceryProduct (ClassifyGroceryProductRequest classifyGroceryProductRequest, String locale, final Response.Listener<ClassifyGroceryProduct200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = classifyGroceryProductRequest;

    // verify the required parameter 'classifyGroceryProductRequest' is set
    if (classifyGroceryProductRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'classifyGroceryProductRequest' when calling classifyGroceryProduct",
        new ApiException(400, "Missing the required parameter 'classifyGroceryProductRequest' when calling classifyGroceryProduct"));
    }

    // create path and map variables
    String path = "/food/products/classify".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "locale", locale));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ClassifyGroceryProduct200Response) ApiInvoker.deserialize(localVarResponse,  "", ClassifyGroceryProduct200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Classify Grocery Product Bulk
  * Provide a set of product jsons, get back classified products.
   * @param classifyGroceryProductBulkRequestInner 
   * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
   * @return Set<ClassifyGroceryProductBulk200ResponseInner>
  */
  public Set<ClassifyGroceryProductBulk200ResponseInner> classifyGroceryProductBulk (Set<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, String locale) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = classifyGroceryProductBulkRequestInner;
    // verify the required parameter 'classifyGroceryProductBulkRequestInner' is set
    if (classifyGroceryProductBulkRequestInner == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'classifyGroceryProductBulkRequestInner' when calling classifyGroceryProductBulk",
        new ApiException(400, "Missing the required parameter 'classifyGroceryProductBulkRequestInner' when calling classifyGroceryProductBulk"));
    }

    // create path and map variables
    String path = "/food/products/classifyBatch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "locale", locale));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Set<ClassifyGroceryProductBulk200ResponseInner>) ApiInvoker.deserialize(localVarResponse, "set", ClassifyGroceryProductBulk200ResponseInner.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Classify Grocery Product Bulk
   * Provide a set of product jsons, get back classified products.
   * @param classifyGroceryProductBulkRequestInner    * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
  */
  public void classifyGroceryProductBulk (Set<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, String locale, final Response.Listener<Set<ClassifyGroceryProductBulk200ResponseInner>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = classifyGroceryProductBulkRequestInner;

    // verify the required parameter 'classifyGroceryProductBulkRequestInner' is set
    if (classifyGroceryProductBulkRequestInner == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'classifyGroceryProductBulkRequestInner' when calling classifyGroceryProductBulk",
        new ApiException(400, "Missing the required parameter 'classifyGroceryProductBulkRequestInner' when calling classifyGroceryProductBulk"));
    }

    // create path and map variables
    String path = "/food/products/classifyBatch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "locale", locale));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Set<ClassifyGroceryProductBulk200ResponseInner>) ApiInvoker.deserialize(localVarResponse,  "set", ClassifyGroceryProductBulk200ResponseInner.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Comparable Products
  * Find comparable products to the given one.
   * @param upc The UPC of the product for which you want to find comparable products.
   * @return GetComparableProducts200Response
  */
  public GetComparableProducts200Response getComparableProducts (BigDecimal upc) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'upc' is set
    if (upc == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'upc' when calling getComparableProducts",
        new ApiException(400, "Missing the required parameter 'upc' when calling getComparableProducts"));
    }

    // create path and map variables
    String path = "/food/products/upc/{upc}/comparable".replaceAll("\\{" + "upc" + "\\}", apiInvoker.escapeString(upc.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetComparableProducts200Response) ApiInvoker.deserialize(localVarResponse, "", GetComparableProducts200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Comparable Products
   * Find comparable products to the given one.
   * @param upc The UPC of the product for which you want to find comparable products.
  */
  public void getComparableProducts (BigDecimal upc, final Response.Listener<GetComparableProducts200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'upc' is set
    if (upc == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'upc' when calling getComparableProducts",
        new ApiException(400, "Missing the required parameter 'upc' when calling getComparableProducts"));
    }

    // create path and map variables
    String path = "/food/products/upc/{upc}/comparable".replaceAll("\\{format\\}","json").replaceAll("\\{" + "upc" + "\\}", apiInvoker.escapeString(upc.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetComparableProducts200Response) ApiInvoker.deserialize(localVarResponse,  "", GetComparableProducts200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Product Information
  * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
   * @param id The item&#39;s id.
   * @return GetProductInformation200Response
  */
  public GetProductInformation200Response getProductInformation (Integer id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProductInformation",
        new ApiException(400, "Missing the required parameter 'id' when calling getProductInformation"));
    }

    // create path and map variables
    String path = "/food/products/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetProductInformation200Response) ApiInvoker.deserialize(localVarResponse, "", GetProductInformation200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Product Information
   * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
   * @param id The item&#39;s id.
  */
  public void getProductInformation (Integer id, final Response.Listener<GetProductInformation200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getProductInformation",
        new ApiException(400, "Missing the required parameter 'id' when calling getProductInformation"));
    }

    // create path and map variables
    String path = "/food/products/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetProductInformation200Response) ApiInvoker.deserialize(localVarResponse,  "", GetProductInformation200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Product Nutrition by ID Image
  * Visualize a product&#39;s nutritional information as an image.
   * @param id The id of the product.
   * @return Object
  */
  public Object productNutritionByIDImage (BigDecimal id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productNutritionByIDImage",
        new ApiException(400, "Missing the required parameter 'id' when calling productNutritionByIDImage"));
    }

    // create path and map variables
    String path = "/food/products/{id}/nutritionWidget.png".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Product Nutrition by ID Image
   * Visualize a product&#39;s nutritional information as an image.
   * @param id The id of the product.
  */
  public void productNutritionByIDImage (BigDecimal id, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productNutritionByIDImage",
        new ApiException(400, "Missing the required parameter 'id' when calling productNutritionByIDImage"));
    }

    // create path and map variables
    String path = "/food/products/{id}/nutritionWidget.png".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Product Nutrition Label Image
  * Get a product&#39;s nutrition label as an image.
   * @param id The product id.
   * @param showOptionalNutrients Whether to show optional nutrients.
   * @param showZeroValues Whether to show zero values.
   * @param showIngredients Whether to show a list of ingredients.
   * @return Object
  */
  public Object productNutritionLabelImage (BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productNutritionLabelImage",
        new ApiException(400, "Missing the required parameter 'id' when calling productNutritionLabelImage"));
    }

    // create path and map variables
    String path = "/food/products/{id}/nutritionLabel.png".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showOptionalNutrients", showOptionalNutrients));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showZeroValues", showZeroValues));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showIngredients", showIngredients));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Product Nutrition Label Image
   * Get a product&#39;s nutrition label as an image.
   * @param id The product id.   * @param showOptionalNutrients Whether to show optional nutrients.   * @param showZeroValues Whether to show zero values.   * @param showIngredients Whether to show a list of ingredients.
  */
  public void productNutritionLabelImage (BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final Response.Listener<Object> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productNutritionLabelImage",
        new ApiException(400, "Missing the required parameter 'id' when calling productNutritionLabelImage"));
    }

    // create path and map variables
    String path = "/food/products/{id}/nutritionLabel.png".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "showOptionalNutrients", showOptionalNutrients));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showZeroValues", showZeroValues));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showIngredients", showIngredients));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Object) ApiInvoker.deserialize(localVarResponse,  "", Object.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Product Nutrition Label Widget
  * Get a product&#39;s nutrition label as an HTML widget.
   * @param id The product id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @param showOptionalNutrients Whether to show optional nutrients.
   * @param showZeroValues Whether to show zero values.
   * @param showIngredients Whether to show a list of ingredients.
   * @return String
  */
  public String productNutritionLabelWidget (BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productNutritionLabelWidget",
        new ApiException(400, "Missing the required parameter 'id' when calling productNutritionLabelWidget"));
    }

    // create path and map variables
    String path = "/food/products/{id}/nutritionLabel".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showOptionalNutrients", showOptionalNutrients));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showZeroValues", showZeroValues));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showIngredients", showIngredients));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Product Nutrition Label Widget
   * Get a product&#39;s nutrition label as an HTML widget.
   * @param id The product id.   * @param defaultCss Whether the default CSS should be added to the response.   * @param showOptionalNutrients Whether to show optional nutrients.   * @param showZeroValues Whether to show zero values.   * @param showIngredients Whether to show a list of ingredients.
  */
  public void productNutritionLabelWidget (BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productNutritionLabelWidget",
        new ApiException(400, "Missing the required parameter 'id' when calling productNutritionLabelWidget"));
    }

    // create path and map variables
    String path = "/food/products/{id}/nutritionLabel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showOptionalNutrients", showOptionalNutrients));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showZeroValues", showZeroValues));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "showIngredients", showIngredients));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search Grocery Products
  * Search packaged food products, such as frozen pizza or Greek yogurt.
   * @param query The (natural language) search query.
   * @param minCalories The minimum amount of calories the product must have.
   * @param maxCalories The maximum amount of calories the product can have.
   * @param minCarbs The minimum amount of carbohydrates in grams the product must have.
   * @param maxCarbs The maximum amount of carbohydrates in grams the product can have.
   * @param minProtein The minimum amount of protein in grams the product must have.
   * @param maxProtein The maximum amount of protein in grams the product can have.
   * @param minFat The minimum amount of fat in grams the product must have.
   * @param maxFat The maximum amount of fat in grams the product can have.
   * @param addProductInformation If set to true, you get more information about the products returned.
   * @param offset The number of results to skip (between 0 and 900).
   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
   * @return SearchGroceryProducts200Response
  */
  public SearchGroceryProducts200Response searchGroceryProducts (String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, Boolean addProductInformation, Integer offset, Integer number) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/food/products/search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minCalories", minCalories));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalories", maxCalories));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minCarbs", minCarbs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarbs", maxCarbs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minProtein", minProtein));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxProtein", maxProtein));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minFat", minFat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxFat", maxFat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "addProductInformation", addProductInformation));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SearchGroceryProducts200Response) ApiInvoker.deserialize(localVarResponse, "", SearchGroceryProducts200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Search Grocery Products
   * Search packaged food products, such as frozen pizza or Greek yogurt.
   * @param query The (natural language) search query.   * @param minCalories The minimum amount of calories the product must have.   * @param maxCalories The maximum amount of calories the product can have.   * @param minCarbs The minimum amount of carbohydrates in grams the product must have.   * @param maxCarbs The maximum amount of carbohydrates in grams the product can have.   * @param minProtein The minimum amount of protein in grams the product must have.   * @param maxProtein The maximum amount of protein in grams the product can have.   * @param minFat The minimum amount of fat in grams the product must have.   * @param maxFat The maximum amount of fat in grams the product can have.   * @param addProductInformation If set to true, you get more information about the products returned.   * @param offset The number of results to skip (between 0 and 900).   * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
  */
  public void searchGroceryProducts (String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, Boolean addProductInformation, Integer offset, Integer number, final Response.Listener<SearchGroceryProducts200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/food/products/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "query", query));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minCalories", minCalories));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxCalories", maxCalories));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minCarbs", minCarbs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxCarbs", maxCarbs));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minProtein", minProtein));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxProtein", maxProtein));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "minFat", minFat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxFat", maxFat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "addProductInformation", addProductInformation));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "number", number));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SearchGroceryProducts200Response) ApiInvoker.deserialize(localVarResponse,  "", SearchGroceryProducts200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search Grocery Products by UPC
  * Get information about a packaged food using its UPC.
   * @param upc The product&#39;s UPC.
   * @return SearchGroceryProductsByUPC200Response
  */
  public SearchGroceryProductsByUPC200Response searchGroceryProductsByUPC (BigDecimal upc) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'upc' is set
    if (upc == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'upc' when calling searchGroceryProductsByUPC",
        new ApiException(400, "Missing the required parameter 'upc' when calling searchGroceryProductsByUPC"));
    }

    // create path and map variables
    String path = "/food/products/upc/{upc}".replaceAll("\\{" + "upc" + "\\}", apiInvoker.escapeString(upc.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SearchGroceryProductsByUPC200Response) ApiInvoker.deserialize(localVarResponse, "", SearchGroceryProductsByUPC200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Search Grocery Products by UPC
   * Get information about a packaged food using its UPC.
   * @param upc The product&#39;s UPC.
  */
  public void searchGroceryProductsByUPC (BigDecimal upc, final Response.Listener<SearchGroceryProductsByUPC200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'upc' is set
    if (upc == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'upc' when calling searchGroceryProductsByUPC",
        new ApiException(400, "Missing the required parameter 'upc' when calling searchGroceryProductsByUPC"));
    }

    // create path and map variables
    String path = "/food/products/upc/{upc}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "upc" + "\\}", apiInvoker.escapeString(upc.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SearchGroceryProductsByUPC200Response) ApiInvoker.deserialize(localVarResponse,  "", SearchGroceryProductsByUPC200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Product Nutrition by ID Widget
  * Visualize a product&#39;s nutritional information as HTML including CSS.
   * @param id The item&#39;s id.
   * @param defaultCss Whether the default CSS should be added to the response.
   * @param accept Accept header.
   * @return String
  */
  public String visualizeProductNutritionByID (Integer id, Boolean defaultCss, String accept) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling visualizeProductNutritionByID",
        new ApiException(400, "Missing the required parameter 'id' when calling visualizeProductNutritionByID"));
    }

    // create path and map variables
    String path = "/food/products/{id}/nutritionWidget".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Product Nutrition by ID Widget
   * Visualize a product&#39;s nutritional information as HTML including CSS.
   * @param id The item&#39;s id.   * @param defaultCss Whether the default CSS should be added to the response.   * @param accept Accept header.
  */
  public void visualizeProductNutritionByID (Integer id, Boolean defaultCss, String accept, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling visualizeProductNutritionByID",
        new ApiException(400, "Missing the required parameter 'id' when calling visualizeProductNutritionByID"));
    }

    // create path and map variables
    String path = "/food/products/{id}/nutritionWidget".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "defaultCss", defaultCss));

    headerParams.put("Accept", ApiInvoker.parameterToString(accept));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyScheme" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
