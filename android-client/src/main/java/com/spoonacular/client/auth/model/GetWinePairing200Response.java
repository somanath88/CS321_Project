/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spoonacular.client.model;

import com.spoonacular.client.model.GetWinePairing200ResponseProductMatchesInner;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * 
 **/
@ApiModel(description = "")
public class GetWinePairing200Response {
  
  @SerializedName("pairedWines")
  private List<String> pairedWines = null;
  @SerializedName("pairingText")
  private String pairingText = null;
  @SerializedName("productMatches")
  private Set<GetWinePairing200ResponseProductMatchesInner> productMatches = null;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public List<String> getPairedWines() {
    return pairedWines;
  }
  public void setPairedWines(List<String> pairedWines) {
    this.pairedWines = pairedWines;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public String getPairingText() {
    return pairingText;
  }
  public void setPairingText(String pairingText) {
    this.pairingText = pairingText;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public Set<GetWinePairing200ResponseProductMatchesInner> getProductMatches() {
    return productMatches;
  }
  public void setProductMatches(Set<GetWinePairing200ResponseProductMatchesInner> productMatches) {
    this.productMatches = productMatches;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWinePairing200Response getWinePairing200Response = (GetWinePairing200Response) o;
    return (this.pairedWines == null ? getWinePairing200Response.pairedWines == null : this.pairedWines.equals(getWinePairing200Response.pairedWines)) &&
        (this.pairingText == null ? getWinePairing200Response.pairingText == null : this.pairingText.equals(getWinePairing200Response.pairingText)) &&
        (this.productMatches == null ? getWinePairing200Response.productMatches == null : this.productMatches.equals(getWinePairing200Response.productMatches));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.pairedWines == null ? 0: this.pairedWines.hashCode());
    result = 31 * result + (this.pairingText == null ? 0: this.pairingText.hashCode());
    result = 31 * result + (this.productMatches == null ? 0: this.productMatches.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWinePairing200Response {\n");
    
    sb.append("  pairedWines: ").append(pairedWines).append("\n");
    sb.append("  pairingText: ").append(pairingText).append("\n");
    sb.append("  productMatches: ").append(productMatches).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
