"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.autocomplete_ingredient_search200_response_inner import AutocompleteIngredientSearch200ResponseInner
from openapi_client.model.compute_ingredient_amount200_response import ComputeIngredientAmount200Response
from openapi_client.model.get_ingredient_information200_response import GetIngredientInformation200Response
from openapi_client.model.get_ingredient_substitutes200_response import GetIngredientSubstitutes200Response
from openapi_client.model.ingredient_search200_response import IngredientSearch200Response
from openapi_client.model.map_ingredients_to_grocery_products200_response_inner import MapIngredientsToGroceryProducts200ResponseInner
from openapi_client.model.map_ingredients_to_grocery_products_request import MapIngredientsToGroceryProductsRequest


class IngredientsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.autocomplete_ingredient_search_endpoint = _Endpoint(
            settings={
                'response_type': ([AutocompleteIngredientSearch200ResponseInner],),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/ingredients/autocomplete',
                'operation_id': 'autocomplete_ingredient_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'number',
                    'meta_information',
                    'intolerances',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('number',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'number':
                        (int,),
                    'meta_information':
                        (bool,),
                    'intolerances':
                        (str,),
                },
                'attribute_map': {
                    'query': 'query',
                    'number': 'number',
                    'meta_information': 'metaInformation',
                    'intolerances': 'intolerances',
                },
                'location_map': {
                    'query': 'query',
                    'number': 'query',
                    'meta_information': 'query',
                    'intolerances': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.compute_ingredient_amount_endpoint = _Endpoint(
            settings={
                'response_type': (ComputeIngredientAmount200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/ingredients/{id}/amount',
                'operation_id': 'compute_ingredient_amount',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'nutrient',
                    'target',
                    'unit',
                ],
                'required': [
                    'id',
                    'nutrient',
                    'target',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (float,),
                    'nutrient':
                        (str,),
                    'target':
                        (float,),
                    'unit':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'nutrient': 'nutrient',
                    'target': 'target',
                    'unit': 'unit',
                },
                'location_map': {
                    'id': 'path',
                    'nutrient': 'query',
                    'target': 'query',
                    'unit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ingredient_information_endpoint = _Endpoint(
            settings={
                'response_type': (GetIngredientInformation200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/ingredients/{id}/information',
                'operation_id': 'get_ingredient_information',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'amount',
                    'unit',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'amount':
                        (float,),
                    'unit':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'amount': 'amount',
                    'unit': 'unit',
                },
                'location_map': {
                    'id': 'path',
                    'amount': 'query',
                    'unit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ingredient_substitutes_endpoint = _Endpoint(
            settings={
                'response_type': (GetIngredientSubstitutes200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/ingredients/substitutes',
                'operation_id': 'get_ingredient_substitutes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ingredient_name',
                ],
                'required': [
                    'ingredient_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ingredient_name':
                        (str,),
                },
                'attribute_map': {
                    'ingredient_name': 'ingredientName',
                },
                'location_map': {
                    'ingredient_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_ingredient_substitutes_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetIngredientSubstitutes200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/ingredients/{id}/substitutes',
                'operation_id': 'get_ingredient_substitutes_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ingredient_search_endpoint = _Endpoint(
            settings={
                'response_type': (IngredientSearch200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/ingredients/search',
                'operation_id': 'ingredient_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'add_children',
                    'min_protein_percent',
                    'max_protein_percent',
                    'min_fat_percent',
                    'max_fat_percent',
                    'min_carbs_percent',
                    'max_carbs_percent',
                    'meta_information',
                    'intolerances',
                    'sort',
                    'sort_direction',
                    'offset',
                    'number',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'offset',
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('offset',): {

                        'inclusive_maximum': 900,
                        'inclusive_minimum': 0,
                    },
                    ('number',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'add_children':
                        (bool,),
                    'min_protein_percent':
                        (float,),
                    'max_protein_percent':
                        (float,),
                    'min_fat_percent':
                        (float,),
                    'max_fat_percent':
                        (float,),
                    'min_carbs_percent':
                        (float,),
                    'max_carbs_percent':
                        (float,),
                    'meta_information':
                        (bool,),
                    'intolerances':
                        (str,),
                    'sort':
                        (str,),
                    'sort_direction':
                        (str,),
                    'offset':
                        (int,),
                    'number':
                        (int,),
                },
                'attribute_map': {
                    'query': 'query',
                    'add_children': 'addChildren',
                    'min_protein_percent': 'minProteinPercent',
                    'max_protein_percent': 'maxProteinPercent',
                    'min_fat_percent': 'minFatPercent',
                    'max_fat_percent': 'maxFatPercent',
                    'min_carbs_percent': 'minCarbsPercent',
                    'max_carbs_percent': 'maxCarbsPercent',
                    'meta_information': 'metaInformation',
                    'intolerances': 'intolerances',
                    'sort': 'sort',
                    'sort_direction': 'sortDirection',
                    'offset': 'offset',
                    'number': 'number',
                },
                'location_map': {
                    'query': 'query',
                    'add_children': 'query',
                    'min_protein_percent': 'query',
                    'max_protein_percent': 'query',
                    'min_fat_percent': 'query',
                    'max_fat_percent': 'query',
                    'min_carbs_percent': 'query',
                    'max_carbs_percent': 'query',
                    'meta_information': 'query',
                    'intolerances': 'query',
                    'sort': 'query',
                    'sort_direction': 'query',
                    'offset': 'query',
                    'number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ingredients_by_id_image_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/ingredientWidget.png',
                'operation_id': 'ingredients_by_id_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'measure',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'measure',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('measure',): {

                        "US": "us",
                        "METRIC": "metric"
                    },
                },
                'openapi_types': {
                    'id':
                        (float,),
                    'measure':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'measure': 'measure',
                },
                'location_map': {
                    'id': 'path',
                    'measure': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.map_ingredients_to_grocery_products_endpoint = _Endpoint(
            settings={
                'response_type': ([MapIngredientsToGroceryProducts200ResponseInner],),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/ingredients/map',
                'operation_id': 'map_ingredients_to_grocery_products',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'map_ingredients_to_grocery_products_request',
                ],
                'required': [
                    'map_ingredients_to_grocery_products_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'map_ingredients_to_grocery_products_request':
                        (MapIngredientsToGroceryProductsRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'map_ingredients_to_grocery_products_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.visualize_ingredients_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/visualizeIngredients',
                'operation_id': 'visualize_ingredients',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'language',
                    'accept',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                    'language',
                    'accept',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "APPLICATION/X-WWW-FORM-URLENCODED": "application/x-www-form-urlencoded",
                        "APPLICATION/JSON": "application/json",
                        "MULTIPART/FORM-DATA": "multipart/form-data"
                    },
                    ('language',): {

                        "EN": "en",
                        "DE": "de"
                    },
                    ('accept',): {

                        "APPLICATION/JSON": "application/json",
                        "TEXT/HTML": "text/html",
                        "MEDIA/*": "media/*"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'language':
                        (str,),
                    'accept':
                        (str,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                    'language': 'language',
                    'accept': 'Accept',
                },
                'location_map': {
                    'content_type': 'header',
                    'language': 'query',
                    'accept': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )

    def autocomplete_ingredient_search(
        self,
        **kwargs
    ):
        """Autocomplete Ingredient Search  # noqa: E501

        Autocomplete the entry of an ingredient.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.autocomplete_ingredient_search(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            query (str): The (natural language) search query.. [optional]
            number (int): The maximum number of items to return (between 1 and 100). Defaults to 10.. [optional] if omitted the server will use the default value of 10
            meta_information (bool): Whether to return more meta information about the ingredients.. [optional]
            intolerances (str): A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [AutocompleteIngredientSearch200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.autocomplete_ingredient_search_endpoint.call_with_http_info(**kwargs)

    def compute_ingredient_amount(
        self,
        id,
        nutrient,
        target,
        **kwargs
    ):
        """Compute Ingredient Amount  # noqa: E501

        Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_ingredient_amount(id, nutrient, target, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The id of the ingredient you want the amount for.
            nutrient (str): The target nutrient. See a list of supported nutrients.
            target (float): The target number of the given nutrient.

        Keyword Args:
            unit (str): The target unit.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ComputeIngredientAmount200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['nutrient'] = \
            nutrient
        kwargs['target'] = \
            target
        return self.compute_ingredient_amount_endpoint.call_with_http_info(**kwargs)

    def get_ingredient_information(
        self,
        id,
        **kwargs
    ):
        """Get Ingredient Information  # noqa: E501

        Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ingredient_information(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            amount (float): The amount of this ingredient.. [optional]
            unit (str): The unit for the given amount.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetIngredientInformation200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_ingredient_information_endpoint.call_with_http_info(**kwargs)

    def get_ingredient_substitutes(
        self,
        ingredient_name,
        **kwargs
    ):
        """Get Ingredient Substitutes  # noqa: E501

        Search for substitutes for a given ingredient.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ingredient_substitutes(ingredient_name, async_req=True)
        >>> result = thread.get()

        Args:
            ingredient_name (str): The name of the ingredient you want to replace.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetIngredientSubstitutes200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ingredient_name'] = \
            ingredient_name
        return self.get_ingredient_substitutes_endpoint.call_with_http_info(**kwargs)

    def get_ingredient_substitutes_by_id(
        self,
        id,
        **kwargs
    ):
        """Get Ingredient Substitutes by ID  # noqa: E501

        Search for substitutes for a given ingredient.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_ingredient_substitutes_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetIngredientSubstitutes200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_ingredient_substitutes_by_id_endpoint.call_with_http_info(**kwargs)

    def ingredient_search(
        self,
        **kwargs
    ):
        """Ingredient Search  # noqa: E501

        Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ingredient_search(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            query (str): The (natural language) search query.. [optional]
            add_children (bool): Whether to add children of found foods.. [optional]
            min_protein_percent (float): The minimum percentage of protein the food must have (between 0 and 100).. [optional]
            max_protein_percent (float): The maximum percentage of protein the food can have (between 0 and 100).. [optional]
            min_fat_percent (float): The minimum percentage of fat the food must have (between 0 and 100).. [optional]
            max_fat_percent (float): The maximum percentage of fat the food can have (between 0 and 100).. [optional]
            min_carbs_percent (float): The minimum percentage of carbs the food must have (between 0 and 100).. [optional]
            max_carbs_percent (float): The maximum percentage of carbs the food can have (between 0 and 100).. [optional]
            meta_information (bool): Whether to return more meta information about the ingredients.. [optional]
            intolerances (str): A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.. [optional]
            sort (str): The strategy to sort recipes by. See a full list of supported sorting options.. [optional]
            sort_direction (str): The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).. [optional]
            offset (int): The number of results to skip (between 0 and 900).. [optional]
            number (int): The maximum number of items to return (between 1 and 100). Defaults to 10.. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IngredientSearch200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.ingredient_search_endpoint.call_with_http_info(**kwargs)

    def ingredients_by_id_image(
        self,
        id,
        **kwargs
    ):
        """Ingredients by ID Image  # noqa: E501

        Visualize a recipe's ingredient list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ingredients_by_id_image(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The recipe id.

        Keyword Args:
            measure (str): Whether the the measures should be 'us' or 'metric'.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.ingredients_by_id_image_endpoint.call_with_http_info(**kwargs)

    def map_ingredients_to_grocery_products(
        self,
        map_ingredients_to_grocery_products_request,
        **kwargs
    ):
        """Map Ingredients to Grocery Products  # noqa: E501

        Map a set of ingredients to products you can buy in the grocery store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.map_ingredients_to_grocery_products(map_ingredients_to_grocery_products_request, async_req=True)
        >>> result = thread.get()

        Args:
            map_ingredients_to_grocery_products_request (MapIngredientsToGroceryProductsRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [MapIngredientsToGroceryProducts200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['map_ingredients_to_grocery_products_request'] = \
            map_ingredients_to_grocery_products_request
        return self.map_ingredients_to_grocery_products_endpoint.call_with_http_info(**kwargs)

    def visualize_ingredients(
        self,
        **kwargs
    ):
        """Ingredients Widget  # noqa: E501

        Visualize ingredients of a recipe. You can play around with that endpoint!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_ingredients(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            content_type (str): The content type.. [optional]
            language (str): The language of the input. Either 'en' or 'de'.. [optional]
            accept (str): Accept header.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.visualize_ingredients_endpoint.call_with_http_info(**kwargs)

