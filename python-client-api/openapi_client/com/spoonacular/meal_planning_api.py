"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.add_meal_plan_template200_response import AddMealPlanTemplate200Response
from openapi_client.model.add_to_meal_plan_request import AddToMealPlanRequest
from openapi_client.model.add_to_meal_plan_request1 import AddToMealPlanRequest1
from openapi_client.model.add_to_shopping_list_request import AddToShoppingListRequest
from openapi_client.model.clear_meal_plan_day_request import ClearMealPlanDayRequest
from openapi_client.model.connect_user200_response import ConnectUser200Response
from openapi_client.model.connect_user_request import ConnectUserRequest
from openapi_client.model.delete_from_meal_plan_request import DeleteFromMealPlanRequest
from openapi_client.model.generate_meal_plan200_response import GenerateMealPlan200Response
from openapi_client.model.generate_shopping_list200_response import GenerateShoppingList200Response
from openapi_client.model.generate_shopping_list_request import GenerateShoppingListRequest
from openapi_client.model.get_meal_plan_template200_response import GetMealPlanTemplate200Response
from openapi_client.model.get_meal_plan_templates200_response import GetMealPlanTemplates200Response
from openapi_client.model.get_meal_plan_week200_response import GetMealPlanWeek200Response
from openapi_client.model.get_shopping_list200_response import GetShoppingList200Response


class MealPlanningApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_meal_plan_template_endpoint = _Endpoint(
            settings={
                'response_type': (AddMealPlanTemplate200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/templates',
                'operation_id': 'add_meal_plan_template',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'hash',
                    'add_to_meal_plan_request',
                ],
                'required': [
                    'username',
                    'hash',
                    'add_to_meal_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'hash':
                        (str,),
                    'add_to_meal_plan_request':
                        (AddToMealPlanRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'hash': 'query',
                    'add_to_meal_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    ''
                ]
            },
            api_client=api_client
        )
        self.add_to_meal_plan_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/items',
                'operation_id': 'add_to_meal_plan',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'hash',
                    'add_to_meal_plan_request',
                ],
                'required': [
                    'username',
                    'hash',
                    'add_to_meal_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'hash':
                        (str,),
                    'add_to_meal_plan_request':
                        (AddToMealPlanRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'hash': 'query',
                    'add_to_meal_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    '',
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.add_to_shopping_list_endpoint = _Endpoint(
            settings={
                'response_type': (GenerateShoppingList200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/shopping-list/items',
                'operation_id': 'add_to_shopping_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'hash',
                    'add_to_meal_plan_request',
                ],
                'required': [
                    'username',
                    'hash',
                    'add_to_meal_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'hash':
                        (str,),
                    'add_to_meal_plan_request':
                        (AddToMealPlanRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'hash': 'query',
                    'add_to_meal_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    '',
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.clear_meal_plan_day_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/day/{date}',
                'operation_id': 'clear_meal_plan_day',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'date',
                    'hash',
                    'clear_meal_plan_day_request',
                ],
                'required': [
                    'username',
                    'date',
                    'hash',
                    'clear_meal_plan_day_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'date':
                        (str,),
                    'hash':
                        (str,),
                    'clear_meal_plan_day_request':
                        (ClearMealPlanDayRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                    'date': 'date',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'date': 'path',
                    'hash': 'query',
                    'clear_meal_plan_day_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    ''
                ]
            },
            api_client=api_client
        )
        self.connect_user_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectUser200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/users/connect',
                'operation_id': 'connect_user',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    '',
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_from_meal_plan_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/items/{id}',
                'operation_id': 'delete_from_meal_plan',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'id',
                    'hash',
                    'delete_from_meal_plan_request',
                ],
                'required': [
                    'username',
                    'id',
                    'hash',
                    'delete_from_meal_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'id':
                        (float,),
                    'hash':
                        (str,),
                    'delete_from_meal_plan_request':
                        (DeleteFromMealPlanRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                    'id': 'id',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'id': 'path',
                    'hash': 'query',
                    'delete_from_meal_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    ''
                ]
            },
            api_client=api_client
        )
        self.delete_from_shopping_list_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/shopping-list/items/{id}',
                'operation_id': 'delete_from_shopping_list',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'id',
                    'hash',
                    'delete_from_meal_plan_request',
                ],
                'required': [
                    'username',
                    'id',
                    'hash',
                    'delete_from_meal_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'id':
                        (int,),
                    'hash':
                        (str,),
                    'delete_from_meal_plan_request':
                        (DeleteFromMealPlanRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                    'id': 'id',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'id': 'path',
                    'hash': 'query',
                    'delete_from_meal_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    ''
                ]
            },
            api_client=api_client
        )
        self.delete_meal_plan_template_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/templates/{id}',
                'operation_id': 'delete_meal_plan_template',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'id',
                    'hash',
                    'delete_from_meal_plan_request',
                ],
                'required': [
                    'username',
                    'id',
                    'hash',
                    'delete_from_meal_plan_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'id':
                        (int,),
                    'hash':
                        (str,),
                    'delete_from_meal_plan_request':
                        (DeleteFromMealPlanRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                    'id': 'id',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'id': 'path',
                    'hash': 'query',
                    'delete_from_meal_plan_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    ''
                ]
            },
            api_client=api_client
        )
        self.generate_meal_plan_endpoint = _Endpoint(
            settings={
                'response_type': (GenerateMealPlan200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/generate',
                'operation_id': 'generate_meal_plan',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'time_frame',
                    'target_calories',
                    'diet',
                    'exclude',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'time_frame':
                        (str,),
                    'target_calories':
                        (float,),
                    'diet':
                        (str,),
                    'exclude':
                        (str,),
                },
                'attribute_map': {
                    'time_frame': 'timeFrame',
                    'target_calories': 'targetCalories',
                    'diet': 'diet',
                    'exclude': 'exclude',
                },
                'location_map': {
                    'time_frame': 'query',
                    'target_calories': 'query',
                    'diet': 'query',
                    'exclude': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.generate_shopping_list_endpoint = _Endpoint(
            settings={
                'response_type': (GenerateShoppingList200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/shopping-list/{start-date}/{end-date}',
                'operation_id': 'generate_shopping_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'start_date',
                    'end_date',
                    'hash',
                    'generate_shopping_list_request',
                ],
                'required': [
                    'username',
                    'start_date',
                    'end_date',
                    'hash',
                    'generate_shopping_list_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'start_date':
                        (str,),
                    'end_date':
                        (str,),
                    'hash':
                        (str,),
                    'generate_shopping_list_request':
                        (GenerateShoppingListRequest,),
                },
                'attribute_map': {
                    'username': 'username',
                    'start_date': 'start-date',
                    'end_date': 'end-date',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'start_date': 'path',
                    'end_date': 'path',
                    'hash': 'query',
                    'generate_shopping_list_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    ''
                ]
            },
            api_client=api_client
        )
        self.get_meal_plan_template_endpoint = _Endpoint(
            settings={
                'response_type': (GetMealPlanTemplate200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/templates/{id}',
                'operation_id': 'get_meal_plan_template',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'id',
                    'hash',
                ],
                'required': [
                    'username',
                    'id',
                    'hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'id':
                        (int,),
                    'hash':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'id': 'id',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'id': 'path',
                    'hash': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_meal_plan_templates_endpoint = _Endpoint(
            settings={
                'response_type': (GetMealPlanTemplates200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/templates',
                'operation_id': 'get_meal_plan_templates',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'hash',
                ],
                'required': [
                    'username',
                    'hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'hash':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'hash': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_meal_plan_week_endpoint = _Endpoint(
            settings={
                'response_type': (GetMealPlanWeek200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/week/{start-date}',
                'operation_id': 'get_meal_plan_week',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'start_date',
                    'hash',
                ],
                'required': [
                    'username',
                    'start_date',
                    'hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'start_date':
                        (str,),
                    'hash':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'start_date': 'start-date',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'start_date': 'path',
                    'hash': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_shopping_list_endpoint = _Endpoint(
            settings={
                'response_type': (GetShoppingList200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/mealplanner/{username}/shopping-list',
                'operation_id': 'get_shopping_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'username',
                    'hash',
                ],
                'required': [
                    'username',
                    'hash',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'username':
                        (str,),
                    'hash':
                        (str,),
                },
                'attribute_map': {
                    'username': 'username',
                    'hash': 'hash',
                },
                'location_map': {
                    'username': 'path',
                    'hash': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def add_meal_plan_template(
        self,
        username,
        hash,
        add_to_meal_plan_request,
        **kwargs
    ):
        """Add Meal Plan Template  # noqa: E501

        Add a meal plan template for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_meal_plan_template(username, hash, add_to_meal_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            hash (str): The private hash for the username.
            add_to_meal_plan_request (AddToMealPlanRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AddMealPlanTemplate200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['hash'] = \
            hash
        kwargs['add_to_meal_plan_request'] = \
            add_to_meal_plan_request
        return self.add_meal_plan_template_endpoint.call_with_http_info(**kwargs)

    def add_to_meal_plan(
        self,
        username,
        hash,
        add_to_meal_plan_request,
        **kwargs
    ):
        """Add to Meal Plan  # noqa: E501

        Add an item to the user's meal plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_to_meal_plan(username, hash, add_to_meal_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            hash (str): The private hash for the username.
            add_to_meal_plan_request (AddToMealPlanRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['hash'] = \
            hash
        kwargs['add_to_meal_plan_request'] = \
            add_to_meal_plan_request
        return self.add_to_meal_plan_endpoint.call_with_http_info(**kwargs)

    def add_to_shopping_list(
        self,
        username,
        hash,
        add_to_meal_plan_request,
        **kwargs
    ):
        """Add to Shopping List  # noqa: E501

        Add an item to the current shopping list of a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_to_shopping_list(username, hash, add_to_meal_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            hash (str): The private hash for the username.
            add_to_meal_plan_request (AddToMealPlanRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GenerateShoppingList200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['hash'] = \
            hash
        kwargs['add_to_meal_plan_request'] = \
            add_to_meal_plan_request
        return self.add_to_shopping_list_endpoint.call_with_http_info(**kwargs)

    def clear_meal_plan_day(
        self,
        username,
        date,
        hash,
        clear_meal_plan_day_request,
        **kwargs
    ):
        """Clear Meal Plan Day  # noqa: E501

        Delete all planned items from the user's meal plan for a specific day.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clear_meal_plan_day(username, date, hash, clear_meal_plan_day_request, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            date (str): The date in the format yyyy-mm-dd.
            hash (str): The private hash for the username.
            clear_meal_plan_day_request (ClearMealPlanDayRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['date'] = \
            date
        kwargs['hash'] = \
            hash
        kwargs['clear_meal_plan_day_request'] = \
            clear_meal_plan_day_request
        return self.clear_meal_plan_day_endpoint.call_with_http_info(**kwargs)

    def connect_user(
        self,
        body,
        **kwargs
    ):
        """Connect User  # noqa: E501

        In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_user(body, async_req=True)
        >>> result = thread.get()

        Args:
            body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ConnectUser200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['body'] = \
            body
        return self.connect_user_endpoint.call_with_http_info(**kwargs)

    def delete_from_meal_plan(
        self,
        username,
        id,
        hash,
        delete_from_meal_plan_request,
        **kwargs
    ):
        """Delete from Meal Plan  # noqa: E501

        Delete an item from the user's meal plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_from_meal_plan(username, id, hash, delete_from_meal_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            id (float): The shopping list item id.
            hash (str): The private hash for the username.
            delete_from_meal_plan_request (DeleteFromMealPlanRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['id'] = \
            id
        kwargs['hash'] = \
            hash
        kwargs['delete_from_meal_plan_request'] = \
            delete_from_meal_plan_request
        return self.delete_from_meal_plan_endpoint.call_with_http_info(**kwargs)

    def delete_from_shopping_list(
        self,
        username,
        id,
        hash,
        delete_from_meal_plan_request,
        **kwargs
    ):
        """Delete from Shopping List  # noqa: E501

        Delete an item from the current shopping list of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_from_shopping_list(username, id, hash, delete_from_meal_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            id (int): The item's id.
            hash (str): The private hash for the username.
            delete_from_meal_plan_request (DeleteFromMealPlanRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['id'] = \
            id
        kwargs['hash'] = \
            hash
        kwargs['delete_from_meal_plan_request'] = \
            delete_from_meal_plan_request
        return self.delete_from_shopping_list_endpoint.call_with_http_info(**kwargs)

    def delete_meal_plan_template(
        self,
        username,
        id,
        hash,
        delete_from_meal_plan_request,
        **kwargs
    ):
        """Delete Meal Plan Template  # noqa: E501

        Delete a meal plan template for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_meal_plan_template(username, id, hash, delete_from_meal_plan_request, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            id (int): The item's id.
            hash (str): The private hash for the username.
            delete_from_meal_plan_request (DeleteFromMealPlanRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['id'] = \
            id
        kwargs['hash'] = \
            hash
        kwargs['delete_from_meal_plan_request'] = \
            delete_from_meal_plan_request
        return self.delete_meal_plan_template_endpoint.call_with_http_info(**kwargs)

    def generate_meal_plan(
        self,
        **kwargs
    ):
        """Generate Meal Plan  # noqa: E501

        Generate a meal plan with three meals per day (breakfast, lunch, and dinner).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_meal_plan(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            time_frame (str): Either for one \"day\" or an entire \"week\".. [optional]
            target_calories (float): What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.. [optional]
            diet (str): Enter a diet that the meal plan has to adhere to. See a full list of supported diets.. [optional]
            exclude (str): A comma-separated list of allergens or ingredients that must be excluded.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GenerateMealPlan200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.generate_meal_plan_endpoint.call_with_http_info(**kwargs)

    def generate_shopping_list(
        self,
        username,
        start_date,
        end_date,
        hash,
        generate_shopping_list_request,
        **kwargs
    ):
        """Generate Shopping List  # noqa: E501

        Generate the shopping list for a user from the meal planner in a given time frame.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_shopping_list(username, start_date, end_date, hash, generate_shopping_list_request, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            start_date (str): The start date in the format yyyy-mm-dd.
            end_date (str): The end date in the format yyyy-mm-dd.
            hash (str): The private hash for the username.
            generate_shopping_list_request (GenerateShoppingListRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GenerateShoppingList200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['start_date'] = \
            start_date
        kwargs['end_date'] = \
            end_date
        kwargs['hash'] = \
            hash
        kwargs['generate_shopping_list_request'] = \
            generate_shopping_list_request
        return self.generate_shopping_list_endpoint.call_with_http_info(**kwargs)

    def get_meal_plan_template(
        self,
        username,
        id,
        hash,
        **kwargs
    ):
        """Get Meal Plan Template  # noqa: E501

        Get information about a meal plan template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_meal_plan_template(username, id, hash, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            id (int): The item's id.
            hash (str): The private hash for the username.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetMealPlanTemplate200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['id'] = \
            id
        kwargs['hash'] = \
            hash
        return self.get_meal_plan_template_endpoint.call_with_http_info(**kwargs)

    def get_meal_plan_templates(
        self,
        username,
        hash,
        **kwargs
    ):
        """Get Meal Plan Templates  # noqa: E501

        Get meal plan templates from user or public ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_meal_plan_templates(username, hash, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            hash (str): The private hash for the username.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetMealPlanTemplates200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['hash'] = \
            hash
        return self.get_meal_plan_templates_endpoint.call_with_http_info(**kwargs)

    def get_meal_plan_week(
        self,
        username,
        start_date,
        hash,
        **kwargs
    ):
        """Get Meal Plan Week  # noqa: E501

        Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_meal_plan_week(username, start_date, hash, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            start_date (str): The start date of the meal planned week in the format yyyy-mm-dd.
            hash (str): The private hash for the username.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetMealPlanWeek200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['start_date'] = \
            start_date
        kwargs['hash'] = \
            hash
        return self.get_meal_plan_week_endpoint.call_with_http_info(**kwargs)

    def get_shopping_list(
        self,
        username,
        hash,
        **kwargs
    ):
        """Get Shopping List  # noqa: E501

        Get the current shopping list for the given user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shopping_list(username, hash, async_req=True)
        >>> result = thread.get()

        Args:
            username (str): The username.
            hash (str): The private hash for the username.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetShoppingList200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['username'] = \
            username
        kwargs['hash'] = \
            hash
        return self.get_shopping_list_endpoint.call_with_http_info(**kwargs)

