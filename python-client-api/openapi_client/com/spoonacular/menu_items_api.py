"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.autocomplete_menu_item_search200_response import AutocompleteMenuItemSearch200Response
from openapi_client.model.get_menu_item_information200_response import GetMenuItemInformation200Response
from openapi_client.model.search_menu_items200_response import SearchMenuItems200Response


class MenuItemsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.autocomplete_menu_item_search_endpoint = _Endpoint(
            settings={
                'response_type': (AutocompleteMenuItemSearch200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/menuItems/suggest',
                'operation_id': 'autocomplete_menu_item_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'number',
                ],
                'required': [
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('number',): {

                        'inclusive_maximum': 25,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'number':
                        (float,),
                },
                'attribute_map': {
                    'query': 'query',
                    'number': 'number',
                },
                'location_map': {
                    'query': 'query',
                    'number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_menu_item_information_endpoint = _Endpoint(
            settings={
                'response_type': (GetMenuItemInformation200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/menuItems/{id}',
                'operation_id': 'get_menu_item_information',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.menu_item_nutrition_by_id_image_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/menuItems/{id}/nutritionWidget.png',
                'operation_id': 'menu_item_nutrition_by_id_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (float,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.menu_item_nutrition_label_image_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/menuItems/{id}/nutritionLabel.png',
                'operation_id': 'menu_item_nutrition_label_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'show_optional_nutrients',
                    'show_zero_values',
                    'show_ingredients',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (float,),
                    'show_optional_nutrients':
                        (bool,),
                    'show_zero_values':
                        (bool,),
                    'show_ingredients':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'show_optional_nutrients': 'showOptionalNutrients',
                    'show_zero_values': 'showZeroValues',
                    'show_ingredients': 'showIngredients',
                },
                'location_map': {
                    'id': 'path',
                    'show_optional_nutrients': 'query',
                    'show_zero_values': 'query',
                    'show_ingredients': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.menu_item_nutrition_label_widget_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/menuItems/{id}/nutritionLabel',
                'operation_id': 'menu_item_nutrition_label_widget',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'default_css',
                    'show_optional_nutrients',
                    'show_zero_values',
                    'show_ingredients',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (float,),
                    'default_css':
                        (bool,),
                    'show_optional_nutrients':
                        (bool,),
                    'show_zero_values':
                        (bool,),
                    'show_ingredients':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'default_css': 'defaultCss',
                    'show_optional_nutrients': 'showOptionalNutrients',
                    'show_zero_values': 'showZeroValues',
                    'show_ingredients': 'showIngredients',
                },
                'location_map': {
                    'id': 'path',
                    'default_css': 'query',
                    'show_optional_nutrients': 'query',
                    'show_zero_values': 'query',
                    'show_ingredients': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_menu_items_endpoint = _Endpoint(
            settings={
                'response_type': (SearchMenuItems200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/menuItems/search',
                'operation_id': 'search_menu_items',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'min_calories',
                    'max_calories',
                    'min_carbs',
                    'max_carbs',
                    'min_protein',
                    'max_protein',
                    'min_fat',
                    'max_fat',
                    'add_menu_item_information',
                    'offset',
                    'number',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'add_menu_item_information',
                ],
                'validation': [
                    'offset',
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('offset',): {

                        'inclusive_maximum': 900,
                        'inclusive_minimum': 0,
                    },
                    ('number',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('add_menu_item_information',): {

                        "FALSE": False,
                        "TRUE": True
                    },
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'min_calories':
                        (float,),
                    'max_calories':
                        (float,),
                    'min_carbs':
                        (float,),
                    'max_carbs':
                        (float,),
                    'min_protein':
                        (float,),
                    'max_protein':
                        (float,),
                    'min_fat':
                        (float,),
                    'max_fat':
                        (float,),
                    'add_menu_item_information':
                        (bool,),
                    'offset':
                        (int,),
                    'number':
                        (int,),
                },
                'attribute_map': {
                    'query': 'query',
                    'min_calories': 'minCalories',
                    'max_calories': 'maxCalories',
                    'min_carbs': 'minCarbs',
                    'max_carbs': 'maxCarbs',
                    'min_protein': 'minProtein',
                    'max_protein': 'maxProtein',
                    'min_fat': 'minFat',
                    'max_fat': 'maxFat',
                    'add_menu_item_information': 'addMenuItemInformation',
                    'offset': 'offset',
                    'number': 'number',
                },
                'location_map': {
                    'query': 'query',
                    'min_calories': 'query',
                    'max_calories': 'query',
                    'min_carbs': 'query',
                    'max_carbs': 'query',
                    'min_protein': 'query',
                    'max_protein': 'query',
                    'min_fat': 'query',
                    'max_fat': 'query',
                    'add_menu_item_information': 'query',
                    'offset': 'query',
                    'number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.visualize_menu_item_nutrition_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/menuItems/{id}/nutritionWidget',
                'operation_id': 'visualize_menu_item_nutrition_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'default_css',
                    'accept',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept',): {

                        "APPLICATION/JSON": "application/json",
                        "TEXT/HTML": "text/html",
                        "MEDIA/*": "media/*"
                    },
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'default_css':
                        (bool,),
                    'accept':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'default_css': 'defaultCss',
                    'accept': 'Accept',
                },
                'location_map': {
                    'id': 'path',
                    'default_css': 'query',
                    'accept': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def autocomplete_menu_item_search(
        self,
        query,
        **kwargs
    ):
        """Autocomplete Menu Item Search  # noqa: E501

        Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.autocomplete_menu_item_search(query, async_req=True)
        >>> result = thread.get()

        Args:
            query (str): The (partial) search query.

        Keyword Args:
            number (float): The number of results to return (between 1 and 25).. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AutocompleteMenuItemSearch200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['query'] = \
            query
        return self.autocomplete_menu_item_search_endpoint.call_with_http_info(**kwargs)

    def get_menu_item_information(
        self,
        id,
        **kwargs
    ):
        """Get Menu Item Information  # noqa: E501

        Use a menu item id to get all available information about a menu item, such as nutrition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_menu_item_information(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetMenuItemInformation200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_menu_item_information_endpoint.call_with_http_info(**kwargs)

    def menu_item_nutrition_by_id_image(
        self,
        id,
        **kwargs
    ):
        """Menu Item Nutrition by ID Image  # noqa: E501

        Visualize a menu item's nutritional information as HTML including CSS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.menu_item_nutrition_by_id_image(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The menu item id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.menu_item_nutrition_by_id_image_endpoint.call_with_http_info(**kwargs)

    def menu_item_nutrition_label_image(
        self,
        id,
        **kwargs
    ):
        """Menu Item Nutrition Label Image  # noqa: E501

        Visualize a menu item's nutritional label information as an image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.menu_item_nutrition_label_image(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The menu item id.

        Keyword Args:
            show_optional_nutrients (bool): Whether to show optional nutrients.. [optional]
            show_zero_values (bool): Whether to show zero values.. [optional]
            show_ingredients (bool): Whether to show a list of ingredients.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.menu_item_nutrition_label_image_endpoint.call_with_http_info(**kwargs)

    def menu_item_nutrition_label_widget(
        self,
        id,
        **kwargs
    ):
        """Menu Item Nutrition Label Widget  # noqa: E501

        Visualize a menu item's nutritional label information as HTML including CSS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.menu_item_nutrition_label_widget(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The menu item id.

        Keyword Args:
            default_css (bool): Whether the default CSS should be added to the response.. [optional] if omitted the server will use the default value of True
            show_optional_nutrients (bool): Whether to show optional nutrients.. [optional]
            show_zero_values (bool): Whether to show zero values.. [optional]
            show_ingredients (bool): Whether to show a list of ingredients.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.menu_item_nutrition_label_widget_endpoint.call_with_http_info(**kwargs)

    def search_menu_items(
        self,
        **kwargs
    ):
        """Search Menu Items  # noqa: E501

        Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_menu_items(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            query (str): The (natural language) search query.. [optional]
            min_calories (float): The minimum amount of calories the menu item must have.. [optional]
            max_calories (float): The maximum amount of calories the menu item can have.. [optional]
            min_carbs (float): The minimum amount of carbohydrates in grams the menu item must have.. [optional]
            max_carbs (float): The maximum amount of carbohydrates in grams the menu item can have.. [optional]
            min_protein (float): The minimum amount of protein in grams the menu item must have.. [optional]
            max_protein (float): The maximum amount of protein in grams the menu item can have.. [optional]
            min_fat (float): The minimum amount of fat in grams the menu item must have.. [optional]
            max_fat (float): The maximum amount of fat in grams the menu item can have.. [optional]
            add_menu_item_information (bool): If set to true, you get more information about the menu items returned.. [optional]
            offset (int): The number of results to skip (between 0 and 900).. [optional]
            number (int): The maximum number of items to return (between 1 and 100). Defaults to 10.. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SearchMenuItems200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.search_menu_items_endpoint.call_with_http_info(**kwargs)

    def visualize_menu_item_nutrition_by_id(
        self,
        id,
        **kwargs
    ):
        """Menu Item Nutrition by ID Widget  # noqa: E501

        Visualize a menu item's nutritional information as HTML including CSS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_menu_item_nutrition_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            default_css (bool): Whether the default CSS should be added to the response.. [optional] if omitted the server will use the default value of True
            accept (str): Accept header.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.visualize_menu_item_nutrition_by_id_endpoint.call_with_http_info(**kwargs)

