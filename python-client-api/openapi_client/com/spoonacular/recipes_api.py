"""
    spoonacular API

    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.  # noqa: E501

    The version of the OpenAPI document: 1.1
    Contact: mail@spoonacular.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.analyze_a_recipe_search_query200_response import AnalyzeARecipeSearchQuery200Response
from openapi_client.model.analyze_recipe_instructions200_response import AnalyzeRecipeInstructions200Response
from openapi_client.model.autocomplete_recipe_search200_response_inner import AutocompleteRecipeSearch200ResponseInner
from openapi_client.model.classify_cuisine200_response import ClassifyCuisine200Response
from openapi_client.model.compute_glycemic_load200_response import ComputeGlycemicLoad200Response
from openapi_client.model.compute_glycemic_load_request import ComputeGlycemicLoadRequest
from openapi_client.model.convert_amounts200_response import ConvertAmounts200Response
from openapi_client.model.create_recipe_card200_response import CreateRecipeCard200Response
from openapi_client.model.get_analyzed_recipe_instructions200_response import GetAnalyzedRecipeInstructions200Response
from openapi_client.model.get_random_recipes200_response import GetRandomRecipes200Response
from openapi_client.model.get_recipe_equipment_by_id200_response import GetRecipeEquipmentByID200Response
from openapi_client.model.get_recipe_information200_response import GetRecipeInformation200Response
from openapi_client.model.get_recipe_information_bulk200_response_inner import GetRecipeInformationBulk200ResponseInner
from openapi_client.model.get_recipe_ingredients_by_id200_response import GetRecipeIngredientsByID200Response
from openapi_client.model.get_recipe_nutrition_widget_by_id200_response import GetRecipeNutritionWidgetByID200Response
from openapi_client.model.get_recipe_price_breakdown_by_id200_response import GetRecipePriceBreakdownByID200Response
from openapi_client.model.get_recipe_taste_by_id200_response import GetRecipeTasteByID200Response
from openapi_client.model.get_similar_recipes200_response_inner import GetSimilarRecipes200ResponseInner
from openapi_client.model.guess_nutrition_by_dish_name200_response import GuessNutritionByDishName200Response
from openapi_client.model.parse_ingredients200_response_inner import ParseIngredients200ResponseInner
from openapi_client.model.quick_answer200_response import QuickAnswer200Response
from openapi_client.model.search_recipes200_response import SearchRecipes200Response
from openapi_client.model.search_recipes_by_ingredients200_response_inner import SearchRecipesByIngredients200ResponseInner
from openapi_client.model.search_recipes_by_nutrients200_response_inner import SearchRecipesByNutrients200ResponseInner
from openapi_client.model.summarize_recipe200_response import SummarizeRecipe200Response


class RecipesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.analyze_a_recipe_search_query_endpoint = _Endpoint(
            settings={
                'response_type': (AnalyzeARecipeSearchQuery200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/queries/analyze',
                'operation_id': 'analyze_a_recipe_search_query',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                ],
                'required': [
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'q':
                        (str,),
                },
                'attribute_map': {
                    'q': 'q',
                },
                'location_map': {
                    'q': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.analyze_recipe_instructions_endpoint = _Endpoint(
            settings={
                'response_type': (AnalyzeRecipeInstructions200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/analyzeInstructions',
                'operation_id': 'analyze_recipe_instructions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "APPLICATION/X-WWW-FORM-URLENCODED": "application/x-www-form-urlencoded",
                        "APPLICATION/JSON": "application/json",
                        "MULTIPART/FORM-DATA": "multipart/form-data"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.autocomplete_recipe_search_endpoint = _Endpoint(
            settings={
                'response_type': ([AutocompleteRecipeSearch200ResponseInner],),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/autocomplete',
                'operation_id': 'autocomplete_recipe_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'number',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('number',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'number':
                        (int,),
                },
                'attribute_map': {
                    'query': 'query',
                    'number': 'number',
                },
                'location_map': {
                    'query': 'query',
                    'number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.classify_cuisine_endpoint = _Endpoint(
            settings={
                'response_type': (ClassifyCuisine200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/cuisine',
                'operation_id': 'classify_cuisine',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "APPLICATION/X-WWW-FORM-URLENCODED": "application/x-www-form-urlencoded",
                        "APPLICATION/JSON": "application/json",
                        "MULTIPART/FORM-DATA": "multipart/form-data"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.compute_glycemic_load_endpoint = _Endpoint(
            settings={
                'response_type': (ComputeGlycemicLoad200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/food/ingredients/glycemicLoad',
                'operation_id': 'compute_glycemic_load',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'compute_glycemic_load_request',
                    'language',
                ],
                'required': [
                    'compute_glycemic_load_request',
                ],
                'nullable': [
                ],
                'enum': [
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('language',): {

                        "EN": "en",
                        "DE": "de"
                    },
                },
                'openapi_types': {
                    'compute_glycemic_load_request':
                        (ComputeGlycemicLoadRequest,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'language': 'language',
                },
                'location_map': {
                    'compute_glycemic_load_request': 'body',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.convert_amounts_endpoint = _Endpoint(
            settings={
                'response_type': (ConvertAmounts200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/convert',
                'operation_id': 'convert_amounts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ingredient_name',
                    'source_amount',
                    'source_unit',
                    'target_unit',
                ],
                'required': [
                    'ingredient_name',
                    'source_amount',
                    'source_unit',
                    'target_unit',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ingredient_name':
                        (str,),
                    'source_amount':
                        (float,),
                    'source_unit':
                        (str,),
                    'target_unit':
                        (str,),
                },
                'attribute_map': {
                    'ingredient_name': 'ingredientName',
                    'source_amount': 'sourceAmount',
                    'source_unit': 'sourceUnit',
                    'target_unit': 'targetUnit',
                },
                'location_map': {
                    'ingredient_name': 'query',
                    'source_amount': 'query',
                    'source_unit': 'query',
                    'target_unit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_recipe_card_endpoint = _Endpoint(
            settings={
                'response_type': (CreateRecipeCard200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/visualizeRecipe',
                'operation_id': 'create_recipe_card',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "APPLICATION/X-WWW-FORM-URLENCODED": "application/x-www-form-urlencoded",
                        "APPLICATION/JSON": "application/json",
                        "MULTIPART/FORM-DATA": "multipart/form-data"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                },
                'location_map': {
                    'content_type': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.equipment_by_id_image_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/equipmentWidget.png',
                'operation_id': 'equipment_by_id_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (float,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.extract_recipe_from_website_endpoint = _Endpoint(
            settings={
                'response_type': (GetRecipeInformation200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/extract',
                'operation_id': 'extract_recipe_from_website',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'url',
                    'force_extraction',
                    'analyze',
                    'include_nutrition',
                    'include_taste',
                ],
                'required': [
                    'url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'url':
                        (str,),
                    'force_extraction':
                        (bool,),
                    'analyze':
                        (bool,),
                    'include_nutrition':
                        (bool,),
                    'include_taste':
                        (bool,),
                },
                'attribute_map': {
                    'url': 'url',
                    'force_extraction': 'forceExtraction',
                    'analyze': 'analyze',
                    'include_nutrition': 'includeNutrition',
                    'include_taste': 'includeTaste',
                },
                'location_map': {
                    'url': 'query',
                    'force_extraction': 'query',
                    'analyze': 'query',
                    'include_nutrition': 'query',
                    'include_taste': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_analyzed_recipe_instructions_endpoint = _Endpoint(
            settings={
                'response_type': (GetAnalyzedRecipeInstructions200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/analyzedInstructions',
                'operation_id': 'get_analyzed_recipe_instructions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'step_breakdown',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'step_breakdown':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'step_breakdown': 'stepBreakdown',
                },
                'location_map': {
                    'id': 'path',
                    'step_breakdown': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_random_recipes_endpoint = _Endpoint(
            settings={
                'response_type': (GetRandomRecipes200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/random',
                'operation_id': 'get_random_recipes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit_license',
                    'tags',
                    'number',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('number',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit_license':
                        (bool,),
                    'tags':
                        (str,),
                    'number':
                        (int,),
                },
                'attribute_map': {
                    'limit_license': 'limitLicense',
                    'tags': 'tags',
                    'number': 'number',
                },
                'location_map': {
                    'limit_license': 'query',
                    'tags': 'query',
                    'number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_recipe_equipment_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetRecipeEquipmentByID200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/equipmentWidget.json',
                'operation_id': 'get_recipe_equipment_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_recipe_information_endpoint = _Endpoint(
            settings={
                'response_type': (GetRecipeInformation200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/information',
                'operation_id': 'get_recipe_information',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'include_nutrition',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'include_nutrition':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'include_nutrition': 'includeNutrition',
                },
                'location_map': {
                    'id': 'path',
                    'include_nutrition': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_recipe_information_bulk_endpoint = _Endpoint(
            settings={
                'response_type': ([GetRecipeInformationBulk200ResponseInner],),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/informationBulk',
                'operation_id': 'get_recipe_information_bulk',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'include_nutrition',
                ],
                'required': [
                    'ids',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ids':
                        (str,),
                    'include_nutrition':
                        (bool,),
                },
                'attribute_map': {
                    'ids': 'ids',
                    'include_nutrition': 'includeNutrition',
                },
                'location_map': {
                    'ids': 'query',
                    'include_nutrition': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_recipe_ingredients_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetRecipeIngredientsByID200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/ingredientWidget.json',
                'operation_id': 'get_recipe_ingredients_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_recipe_nutrition_widget_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetRecipeNutritionWidgetByID200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/nutritionWidget.json',
                'operation_id': 'get_recipe_nutrition_widget_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_recipe_price_breakdown_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetRecipePriceBreakdownByID200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/priceBreakdownWidget.json',
                'operation_id': 'get_recipe_price_breakdown_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_recipe_taste_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetRecipeTasteByID200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/tasteWidget.json',
                'operation_id': 'get_recipe_taste_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'normalize',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'normalize',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('normalize',): {

                        "FALSE": False,
                        "TRUE": True
                    },
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'normalize':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'normalize': 'normalize',
                },
                'location_map': {
                    'id': 'path',
                    'normalize': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_similar_recipes_endpoint = _Endpoint(
            settings={
                'response_type': ([GetSimilarRecipes200ResponseInner],),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/similar',
                'operation_id': 'get_similar_recipes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'number',
                    'limit_license',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('number',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'number':
                        (int,),
                    'limit_license':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'number': 'number',
                    'limit_license': 'limitLicense',
                },
                'location_map': {
                    'id': 'path',
                    'number': 'query',
                    'limit_license': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.guess_nutrition_by_dish_name_endpoint = _Endpoint(
            settings={
                'response_type': (GuessNutritionByDishName200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/guessNutrition',
                'operation_id': 'guess_nutrition_by_dish_name',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'title',
                ],
                'required': [
                    'title',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'title':
                        (str,),
                },
                'attribute_map': {
                    'title': 'title',
                },
                'location_map': {
                    'title': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ingredients_by_id_image_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/ingredientWidget.png',
                'operation_id': 'ingredients_by_id_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'measure',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'measure',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('measure',): {

                        "US": "us",
                        "METRIC": "metric"
                    },
                },
                'openapi_types': {
                    'id':
                        (float,),
                    'measure':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'measure': 'measure',
                },
                'location_map': {
                    'id': 'path',
                    'measure': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.parse_ingredients_endpoint = _Endpoint(
            settings={
                'response_type': ([ParseIngredients200ResponseInner],),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/parseIngredients',
                'operation_id': 'parse_ingredients',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'language',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "APPLICATION/X-WWW-FORM-URLENCODED": "application/x-www-form-urlencoded",
                        "APPLICATION/JSON": "application/json",
                        "MULTIPART/FORM-DATA": "multipart/form-data"
                    },
                    ('language',): {

                        "EN": "en",
                        "DE": "de"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                    'language': 'language',
                },
                'location_map': {
                    'content_type': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.price_breakdown_by_id_image_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/priceBreakdownWidget.png',
                'operation_id': 'price_breakdown_by_id_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (float,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.quick_answer_endpoint = _Endpoint(
            settings={
                'response_type': (QuickAnswer200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/quickAnswer',
                'operation_id': 'quick_answer',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                ],
                'required': [
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'q':
                        (str,),
                },
                'attribute_map': {
                    'q': 'q',
                },
                'location_map': {
                    'q': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.recipe_nutrition_by_id_image_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/nutritionWidget.png',
                'operation_id': 'recipe_nutrition_by_id_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (float,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.recipe_nutrition_label_image_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/nutritionLabel.png',
                'operation_id': 'recipe_nutrition_label_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'show_optional_nutrients',
                    'show_zero_values',
                    'show_ingredients',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (float,),
                    'show_optional_nutrients':
                        (bool,),
                    'show_zero_values':
                        (bool,),
                    'show_ingredients':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'show_optional_nutrients': 'showOptionalNutrients',
                    'show_zero_values': 'showZeroValues',
                    'show_ingredients': 'showIngredients',
                },
                'location_map': {
                    'id': 'path',
                    'show_optional_nutrients': 'query',
                    'show_zero_values': 'query',
                    'show_ingredients': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.recipe_nutrition_label_widget_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/nutritionLabel',
                'operation_id': 'recipe_nutrition_label_widget',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'default_css',
                    'show_optional_nutrients',
                    'show_zero_values',
                    'show_ingredients',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (float,),
                    'default_css':
                        (bool,),
                    'show_optional_nutrients':
                        (bool,),
                    'show_zero_values':
                        (bool,),
                    'show_ingredients':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'default_css': 'defaultCss',
                    'show_optional_nutrients': 'showOptionalNutrients',
                    'show_zero_values': 'showZeroValues',
                    'show_ingredients': 'showIngredients',
                },
                'location_map': {
                    'id': 'path',
                    'default_css': 'query',
                    'show_optional_nutrients': 'query',
                    'show_zero_values': 'query',
                    'show_ingredients': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.recipe_taste_by_id_image_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/tasteWidget.png',
                'operation_id': 'recipe_taste_by_id_image',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'normalize',
                    'rgb',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (float,),
                    'normalize':
                        (bool,),
                    'rgb':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'normalize': 'normalize',
                    'rgb': 'rgb',
                },
                'location_map': {
                    'id': 'path',
                    'normalize': 'query',
                    'rgb': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_recipes_endpoint = _Endpoint(
            settings={
                'response_type': (SearchRecipes200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/complexSearch',
                'operation_id': 'search_recipes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'cuisine',
                    'exclude_cuisine',
                    'diet',
                    'intolerances',
                    'equipment',
                    'include_ingredients',
                    'exclude_ingredients',
                    'type',
                    'instructions_required',
                    'fill_ingredients',
                    'add_recipe_information',
                    'add_recipe_nutrition',
                    'author',
                    'tags',
                    'recipe_box_id',
                    'title_match',
                    'max_ready_time',
                    'ignore_pantry',
                    'sort',
                    'sort_direction',
                    'min_carbs',
                    'max_carbs',
                    'min_protein',
                    'max_protein',
                    'min_calories',
                    'max_calories',
                    'min_fat',
                    'max_fat',
                    'min_alcohol',
                    'max_alcohol',
                    'min_caffeine',
                    'max_caffeine',
                    'min_copper',
                    'max_copper',
                    'min_calcium',
                    'max_calcium',
                    'min_choline',
                    'max_choline',
                    'min_cholesterol',
                    'max_cholesterol',
                    'min_fluoride',
                    'max_fluoride',
                    'min_saturated_fat',
                    'max_saturated_fat',
                    'min_vitamin_a',
                    'max_vitamin_a',
                    'min_vitamin_c',
                    'max_vitamin_c',
                    'min_vitamin_d',
                    'max_vitamin_d',
                    'min_vitamin_e',
                    'max_vitamin_e',
                    'min_vitamin_k',
                    'max_vitamin_k',
                    'min_vitamin_b1',
                    'max_vitamin_b1',
                    'min_vitamin_b2',
                    'max_vitamin_b2',
                    'min_vitamin_b5',
                    'max_vitamin_b5',
                    'min_vitamin_b3',
                    'max_vitamin_b3',
                    'min_vitamin_b6',
                    'max_vitamin_b6',
                    'min_vitamin_b12',
                    'max_vitamin_b12',
                    'min_fiber',
                    'max_fiber',
                    'min_folate',
                    'max_folate',
                    'min_folic_acid',
                    'max_folic_acid',
                    'min_iodine',
                    'max_iodine',
                    'min_iron',
                    'max_iron',
                    'min_magnesium',
                    'max_magnesium',
                    'min_manganese',
                    'max_manganese',
                    'min_phosphorus',
                    'max_phosphorus',
                    'min_potassium',
                    'max_potassium',
                    'min_selenium',
                    'max_selenium',
                    'min_sodium',
                    'max_sodium',
                    'min_sugar',
                    'max_sugar',
                    'min_zinc',
                    'max_zinc',
                    'offset',
                    'number',
                    'limit_license',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'offset',
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('offset',): {

                        'inclusive_maximum': 900,
                        'inclusive_minimum': 0,
                    },
                    ('number',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'cuisine':
                        (str,),
                    'exclude_cuisine':
                        (str,),
                    'diet':
                        (str,),
                    'intolerances':
                        (str,),
                    'equipment':
                        (str,),
                    'include_ingredients':
                        (str,),
                    'exclude_ingredients':
                        (str,),
                    'type':
                        (str,),
                    'instructions_required':
                        (bool,),
                    'fill_ingredients':
                        (bool,),
                    'add_recipe_information':
                        (bool,),
                    'add_recipe_nutrition':
                        (bool,),
                    'author':
                        (str,),
                    'tags':
                        (str,),
                    'recipe_box_id':
                        (float,),
                    'title_match':
                        (str,),
                    'max_ready_time':
                        (float,),
                    'ignore_pantry':
                        (bool,),
                    'sort':
                        (str,),
                    'sort_direction':
                        (str,),
                    'min_carbs':
                        (float,),
                    'max_carbs':
                        (float,),
                    'min_protein':
                        (float,),
                    'max_protein':
                        (float,),
                    'min_calories':
                        (float,),
                    'max_calories':
                        (float,),
                    'min_fat':
                        (float,),
                    'max_fat':
                        (float,),
                    'min_alcohol':
                        (float,),
                    'max_alcohol':
                        (float,),
                    'min_caffeine':
                        (float,),
                    'max_caffeine':
                        (float,),
                    'min_copper':
                        (float,),
                    'max_copper':
                        (float,),
                    'min_calcium':
                        (float,),
                    'max_calcium':
                        (float,),
                    'min_choline':
                        (float,),
                    'max_choline':
                        (float,),
                    'min_cholesterol':
                        (float,),
                    'max_cholesterol':
                        (float,),
                    'min_fluoride':
                        (float,),
                    'max_fluoride':
                        (float,),
                    'min_saturated_fat':
                        (float,),
                    'max_saturated_fat':
                        (float,),
                    'min_vitamin_a':
                        (float,),
                    'max_vitamin_a':
                        (float,),
                    'min_vitamin_c':
                        (float,),
                    'max_vitamin_c':
                        (float,),
                    'min_vitamin_d':
                        (float,),
                    'max_vitamin_d':
                        (float,),
                    'min_vitamin_e':
                        (float,),
                    'max_vitamin_e':
                        (float,),
                    'min_vitamin_k':
                        (float,),
                    'max_vitamin_k':
                        (float,),
                    'min_vitamin_b1':
                        (float,),
                    'max_vitamin_b1':
                        (float,),
                    'min_vitamin_b2':
                        (float,),
                    'max_vitamin_b2':
                        (float,),
                    'min_vitamin_b5':
                        (float,),
                    'max_vitamin_b5':
                        (float,),
                    'min_vitamin_b3':
                        (float,),
                    'max_vitamin_b3':
                        (float,),
                    'min_vitamin_b6':
                        (float,),
                    'max_vitamin_b6':
                        (float,),
                    'min_vitamin_b12':
                        (float,),
                    'max_vitamin_b12':
                        (float,),
                    'min_fiber':
                        (float,),
                    'max_fiber':
                        (float,),
                    'min_folate':
                        (float,),
                    'max_folate':
                        (float,),
                    'min_folic_acid':
                        (float,),
                    'max_folic_acid':
                        (float,),
                    'min_iodine':
                        (float,),
                    'max_iodine':
                        (float,),
                    'min_iron':
                        (float,),
                    'max_iron':
                        (float,),
                    'min_magnesium':
                        (float,),
                    'max_magnesium':
                        (float,),
                    'min_manganese':
                        (float,),
                    'max_manganese':
                        (float,),
                    'min_phosphorus':
                        (float,),
                    'max_phosphorus':
                        (float,),
                    'min_potassium':
                        (float,),
                    'max_potassium':
                        (float,),
                    'min_selenium':
                        (float,),
                    'max_selenium':
                        (float,),
                    'min_sodium':
                        (float,),
                    'max_sodium':
                        (float,),
                    'min_sugar':
                        (float,),
                    'max_sugar':
                        (float,),
                    'min_zinc':
                        (float,),
                    'max_zinc':
                        (float,),
                    'offset':
                        (int,),
                    'number':
                        (int,),
                    'limit_license':
                        (bool,),
                },
                'attribute_map': {
                    'query': 'query',
                    'cuisine': 'cuisine',
                    'exclude_cuisine': 'excludeCuisine',
                    'diet': 'diet',
                    'intolerances': 'intolerances',
                    'equipment': 'equipment',
                    'include_ingredients': 'includeIngredients',
                    'exclude_ingredients': 'excludeIngredients',
                    'type': 'type',
                    'instructions_required': 'instructionsRequired',
                    'fill_ingredients': 'fillIngredients',
                    'add_recipe_information': 'addRecipeInformation',
                    'add_recipe_nutrition': 'addRecipeNutrition',
                    'author': 'author',
                    'tags': 'tags',
                    'recipe_box_id': 'recipeBoxId',
                    'title_match': 'titleMatch',
                    'max_ready_time': 'maxReadyTime',
                    'ignore_pantry': 'ignorePantry',
                    'sort': 'sort',
                    'sort_direction': 'sortDirection',
                    'min_carbs': 'minCarbs',
                    'max_carbs': 'maxCarbs',
                    'min_protein': 'minProtein',
                    'max_protein': 'maxProtein',
                    'min_calories': 'minCalories',
                    'max_calories': 'maxCalories',
                    'min_fat': 'minFat',
                    'max_fat': 'maxFat',
                    'min_alcohol': 'minAlcohol',
                    'max_alcohol': 'maxAlcohol',
                    'min_caffeine': 'minCaffeine',
                    'max_caffeine': 'maxCaffeine',
                    'min_copper': 'minCopper',
                    'max_copper': 'maxCopper',
                    'min_calcium': 'minCalcium',
                    'max_calcium': 'maxCalcium',
                    'min_choline': 'minCholine',
                    'max_choline': 'maxCholine',
                    'min_cholesterol': 'minCholesterol',
                    'max_cholesterol': 'maxCholesterol',
                    'min_fluoride': 'minFluoride',
                    'max_fluoride': 'maxFluoride',
                    'min_saturated_fat': 'minSaturatedFat',
                    'max_saturated_fat': 'maxSaturatedFat',
                    'min_vitamin_a': 'minVitaminA',
                    'max_vitamin_a': 'maxVitaminA',
                    'min_vitamin_c': 'minVitaminC',
                    'max_vitamin_c': 'maxVitaminC',
                    'min_vitamin_d': 'minVitaminD',
                    'max_vitamin_d': 'maxVitaminD',
                    'min_vitamin_e': 'minVitaminE',
                    'max_vitamin_e': 'maxVitaminE',
                    'min_vitamin_k': 'minVitaminK',
                    'max_vitamin_k': 'maxVitaminK',
                    'min_vitamin_b1': 'minVitaminB1',
                    'max_vitamin_b1': 'maxVitaminB1',
                    'min_vitamin_b2': 'minVitaminB2',
                    'max_vitamin_b2': 'maxVitaminB2',
                    'min_vitamin_b5': 'minVitaminB5',
                    'max_vitamin_b5': 'maxVitaminB5',
                    'min_vitamin_b3': 'minVitaminB3',
                    'max_vitamin_b3': 'maxVitaminB3',
                    'min_vitamin_b6': 'minVitaminB6',
                    'max_vitamin_b6': 'maxVitaminB6',
                    'min_vitamin_b12': 'minVitaminB12',
                    'max_vitamin_b12': 'maxVitaminB12',
                    'min_fiber': 'minFiber',
                    'max_fiber': 'maxFiber',
                    'min_folate': 'minFolate',
                    'max_folate': 'maxFolate',
                    'min_folic_acid': 'minFolicAcid',
                    'max_folic_acid': 'maxFolicAcid',
                    'min_iodine': 'minIodine',
                    'max_iodine': 'maxIodine',
                    'min_iron': 'minIron',
                    'max_iron': 'maxIron',
                    'min_magnesium': 'minMagnesium',
                    'max_magnesium': 'maxMagnesium',
                    'min_manganese': 'minManganese',
                    'max_manganese': 'maxManganese',
                    'min_phosphorus': 'minPhosphorus',
                    'max_phosphorus': 'maxPhosphorus',
                    'min_potassium': 'minPotassium',
                    'max_potassium': 'maxPotassium',
                    'min_selenium': 'minSelenium',
                    'max_selenium': 'maxSelenium',
                    'min_sodium': 'minSodium',
                    'max_sodium': 'maxSodium',
                    'min_sugar': 'minSugar',
                    'max_sugar': 'maxSugar',
                    'min_zinc': 'minZinc',
                    'max_zinc': 'maxZinc',
                    'offset': 'offset',
                    'number': 'number',
                    'limit_license': 'limitLicense',
                },
                'location_map': {
                    'query': 'query',
                    'cuisine': 'query',
                    'exclude_cuisine': 'query',
                    'diet': 'query',
                    'intolerances': 'query',
                    'equipment': 'query',
                    'include_ingredients': 'query',
                    'exclude_ingredients': 'query',
                    'type': 'query',
                    'instructions_required': 'query',
                    'fill_ingredients': 'query',
                    'add_recipe_information': 'query',
                    'add_recipe_nutrition': 'query',
                    'author': 'query',
                    'tags': 'query',
                    'recipe_box_id': 'query',
                    'title_match': 'query',
                    'max_ready_time': 'query',
                    'ignore_pantry': 'query',
                    'sort': 'query',
                    'sort_direction': 'query',
                    'min_carbs': 'query',
                    'max_carbs': 'query',
                    'min_protein': 'query',
                    'max_protein': 'query',
                    'min_calories': 'query',
                    'max_calories': 'query',
                    'min_fat': 'query',
                    'max_fat': 'query',
                    'min_alcohol': 'query',
                    'max_alcohol': 'query',
                    'min_caffeine': 'query',
                    'max_caffeine': 'query',
                    'min_copper': 'query',
                    'max_copper': 'query',
                    'min_calcium': 'query',
                    'max_calcium': 'query',
                    'min_choline': 'query',
                    'max_choline': 'query',
                    'min_cholesterol': 'query',
                    'max_cholesterol': 'query',
                    'min_fluoride': 'query',
                    'max_fluoride': 'query',
                    'min_saturated_fat': 'query',
                    'max_saturated_fat': 'query',
                    'min_vitamin_a': 'query',
                    'max_vitamin_a': 'query',
                    'min_vitamin_c': 'query',
                    'max_vitamin_c': 'query',
                    'min_vitamin_d': 'query',
                    'max_vitamin_d': 'query',
                    'min_vitamin_e': 'query',
                    'max_vitamin_e': 'query',
                    'min_vitamin_k': 'query',
                    'max_vitamin_k': 'query',
                    'min_vitamin_b1': 'query',
                    'max_vitamin_b1': 'query',
                    'min_vitamin_b2': 'query',
                    'max_vitamin_b2': 'query',
                    'min_vitamin_b5': 'query',
                    'max_vitamin_b5': 'query',
                    'min_vitamin_b3': 'query',
                    'max_vitamin_b3': 'query',
                    'min_vitamin_b6': 'query',
                    'max_vitamin_b6': 'query',
                    'min_vitamin_b12': 'query',
                    'max_vitamin_b12': 'query',
                    'min_fiber': 'query',
                    'max_fiber': 'query',
                    'min_folate': 'query',
                    'max_folate': 'query',
                    'min_folic_acid': 'query',
                    'max_folic_acid': 'query',
                    'min_iodine': 'query',
                    'max_iodine': 'query',
                    'min_iron': 'query',
                    'max_iron': 'query',
                    'min_magnesium': 'query',
                    'max_magnesium': 'query',
                    'min_manganese': 'query',
                    'max_manganese': 'query',
                    'min_phosphorus': 'query',
                    'max_phosphorus': 'query',
                    'min_potassium': 'query',
                    'max_potassium': 'query',
                    'min_selenium': 'query',
                    'max_selenium': 'query',
                    'min_sodium': 'query',
                    'max_sodium': 'query',
                    'min_sugar': 'query',
                    'max_sugar': 'query',
                    'min_zinc': 'query',
                    'max_zinc': 'query',
                    'offset': 'query',
                    'number': 'query',
                    'limit_license': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_recipes_by_ingredients_endpoint = _Endpoint(
            settings={
                'response_type': ([SearchRecipesByIngredients200ResponseInner],),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/findByIngredients',
                'operation_id': 'search_recipes_by_ingredients',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ingredients',
                    'number',
                    'limit_license',
                    'ranking',
                    'ignore_pantry',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('number',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ingredients':
                        (str,),
                    'number':
                        (int,),
                    'limit_license':
                        (bool,),
                    'ranking':
                        (float,),
                    'ignore_pantry':
                        (bool,),
                },
                'attribute_map': {
                    'ingredients': 'ingredients',
                    'number': 'number',
                    'limit_license': 'limitLicense',
                    'ranking': 'ranking',
                    'ignore_pantry': 'ignorePantry',
                },
                'location_map': {
                    'ingredients': 'query',
                    'number': 'query',
                    'limit_license': 'query',
                    'ranking': 'query',
                    'ignore_pantry': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_recipes_by_nutrients_endpoint = _Endpoint(
            settings={
                'response_type': ([SearchRecipesByNutrients200ResponseInner],),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/findByNutrients',
                'operation_id': 'search_recipes_by_nutrients',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'min_carbs',
                    'max_carbs',
                    'min_protein',
                    'max_protein',
                    'min_calories',
                    'max_calories',
                    'min_fat',
                    'max_fat',
                    'min_alcohol',
                    'max_alcohol',
                    'min_caffeine',
                    'max_caffeine',
                    'min_copper',
                    'max_copper',
                    'min_calcium',
                    'max_calcium',
                    'min_choline',
                    'max_choline',
                    'min_cholesterol',
                    'max_cholesterol',
                    'min_fluoride',
                    'max_fluoride',
                    'min_saturated_fat',
                    'max_saturated_fat',
                    'min_vitamin_a',
                    'max_vitamin_a',
                    'min_vitamin_c',
                    'max_vitamin_c',
                    'min_vitamin_d',
                    'max_vitamin_d',
                    'min_vitamin_e',
                    'max_vitamin_e',
                    'min_vitamin_k',
                    'max_vitamin_k',
                    'min_vitamin_b1',
                    'max_vitamin_b1',
                    'min_vitamin_b2',
                    'max_vitamin_b2',
                    'min_vitamin_b5',
                    'max_vitamin_b5',
                    'min_vitamin_b3',
                    'max_vitamin_b3',
                    'min_vitamin_b6',
                    'max_vitamin_b6',
                    'min_vitamin_b12',
                    'max_vitamin_b12',
                    'min_fiber',
                    'max_fiber',
                    'min_folate',
                    'max_folate',
                    'min_folic_acid',
                    'max_folic_acid',
                    'min_iodine',
                    'max_iodine',
                    'min_iron',
                    'max_iron',
                    'min_magnesium',
                    'max_magnesium',
                    'min_manganese',
                    'max_manganese',
                    'min_phosphorus',
                    'max_phosphorus',
                    'min_potassium',
                    'max_potassium',
                    'min_selenium',
                    'max_selenium',
                    'min_sodium',
                    'max_sodium',
                    'min_sugar',
                    'max_sugar',
                    'min_zinc',
                    'max_zinc',
                    'offset',
                    'number',
                    'random',
                    'limit_license',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'offset',
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('offset',): {

                        'inclusive_maximum': 900,
                        'inclusive_minimum': 0,
                    },
                    ('number',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'min_carbs':
                        (float,),
                    'max_carbs':
                        (float,),
                    'min_protein':
                        (float,),
                    'max_protein':
                        (float,),
                    'min_calories':
                        (float,),
                    'max_calories':
                        (float,),
                    'min_fat':
                        (float,),
                    'max_fat':
                        (float,),
                    'min_alcohol':
                        (float,),
                    'max_alcohol':
                        (float,),
                    'min_caffeine':
                        (float,),
                    'max_caffeine':
                        (float,),
                    'min_copper':
                        (float,),
                    'max_copper':
                        (float,),
                    'min_calcium':
                        (float,),
                    'max_calcium':
                        (float,),
                    'min_choline':
                        (float,),
                    'max_choline':
                        (float,),
                    'min_cholesterol':
                        (float,),
                    'max_cholesterol':
                        (float,),
                    'min_fluoride':
                        (float,),
                    'max_fluoride':
                        (float,),
                    'min_saturated_fat':
                        (float,),
                    'max_saturated_fat':
                        (float,),
                    'min_vitamin_a':
                        (float,),
                    'max_vitamin_a':
                        (float,),
                    'min_vitamin_c':
                        (float,),
                    'max_vitamin_c':
                        (float,),
                    'min_vitamin_d':
                        (float,),
                    'max_vitamin_d':
                        (float,),
                    'min_vitamin_e':
                        (float,),
                    'max_vitamin_e':
                        (float,),
                    'min_vitamin_k':
                        (float,),
                    'max_vitamin_k':
                        (float,),
                    'min_vitamin_b1':
                        (float,),
                    'max_vitamin_b1':
                        (float,),
                    'min_vitamin_b2':
                        (float,),
                    'max_vitamin_b2':
                        (float,),
                    'min_vitamin_b5':
                        (float,),
                    'max_vitamin_b5':
                        (float,),
                    'min_vitamin_b3':
                        (float,),
                    'max_vitamin_b3':
                        (float,),
                    'min_vitamin_b6':
                        (float,),
                    'max_vitamin_b6':
                        (float,),
                    'min_vitamin_b12':
                        (float,),
                    'max_vitamin_b12':
                        (float,),
                    'min_fiber':
                        (float,),
                    'max_fiber':
                        (float,),
                    'min_folate':
                        (float,),
                    'max_folate':
                        (float,),
                    'min_folic_acid':
                        (float,),
                    'max_folic_acid':
                        (float,),
                    'min_iodine':
                        (float,),
                    'max_iodine':
                        (float,),
                    'min_iron':
                        (float,),
                    'max_iron':
                        (float,),
                    'min_magnesium':
                        (float,),
                    'max_magnesium':
                        (float,),
                    'min_manganese':
                        (float,),
                    'max_manganese':
                        (float,),
                    'min_phosphorus':
                        (float,),
                    'max_phosphorus':
                        (float,),
                    'min_potassium':
                        (float,),
                    'max_potassium':
                        (float,),
                    'min_selenium':
                        (float,),
                    'max_selenium':
                        (float,),
                    'min_sodium':
                        (float,),
                    'max_sodium':
                        (float,),
                    'min_sugar':
                        (float,),
                    'max_sugar':
                        (float,),
                    'min_zinc':
                        (float,),
                    'max_zinc':
                        (float,),
                    'offset':
                        (int,),
                    'number':
                        (int,),
                    'random':
                        (bool,),
                    'limit_license':
                        (bool,),
                },
                'attribute_map': {
                    'min_carbs': 'minCarbs',
                    'max_carbs': 'maxCarbs',
                    'min_protein': 'minProtein',
                    'max_protein': 'maxProtein',
                    'min_calories': 'minCalories',
                    'max_calories': 'maxCalories',
                    'min_fat': 'minFat',
                    'max_fat': 'maxFat',
                    'min_alcohol': 'minAlcohol',
                    'max_alcohol': 'maxAlcohol',
                    'min_caffeine': 'minCaffeine',
                    'max_caffeine': 'maxCaffeine',
                    'min_copper': 'minCopper',
                    'max_copper': 'maxCopper',
                    'min_calcium': 'minCalcium',
                    'max_calcium': 'maxCalcium',
                    'min_choline': 'minCholine',
                    'max_choline': 'maxCholine',
                    'min_cholesterol': 'minCholesterol',
                    'max_cholesterol': 'maxCholesterol',
                    'min_fluoride': 'minFluoride',
                    'max_fluoride': 'maxFluoride',
                    'min_saturated_fat': 'minSaturatedFat',
                    'max_saturated_fat': 'maxSaturatedFat',
                    'min_vitamin_a': 'minVitaminA',
                    'max_vitamin_a': 'maxVitaminA',
                    'min_vitamin_c': 'minVitaminC',
                    'max_vitamin_c': 'maxVitaminC',
                    'min_vitamin_d': 'minVitaminD',
                    'max_vitamin_d': 'maxVitaminD',
                    'min_vitamin_e': 'minVitaminE',
                    'max_vitamin_e': 'maxVitaminE',
                    'min_vitamin_k': 'minVitaminK',
                    'max_vitamin_k': 'maxVitaminK',
                    'min_vitamin_b1': 'minVitaminB1',
                    'max_vitamin_b1': 'maxVitaminB1',
                    'min_vitamin_b2': 'minVitaminB2',
                    'max_vitamin_b2': 'maxVitaminB2',
                    'min_vitamin_b5': 'minVitaminB5',
                    'max_vitamin_b5': 'maxVitaminB5',
                    'min_vitamin_b3': 'minVitaminB3',
                    'max_vitamin_b3': 'maxVitaminB3',
                    'min_vitamin_b6': 'minVitaminB6',
                    'max_vitamin_b6': 'maxVitaminB6',
                    'min_vitamin_b12': 'minVitaminB12',
                    'max_vitamin_b12': 'maxVitaminB12',
                    'min_fiber': 'minFiber',
                    'max_fiber': 'maxFiber',
                    'min_folate': 'minFolate',
                    'max_folate': 'maxFolate',
                    'min_folic_acid': 'minFolicAcid',
                    'max_folic_acid': 'maxFolicAcid',
                    'min_iodine': 'minIodine',
                    'max_iodine': 'maxIodine',
                    'min_iron': 'minIron',
                    'max_iron': 'maxIron',
                    'min_magnesium': 'minMagnesium',
                    'max_magnesium': 'maxMagnesium',
                    'min_manganese': 'minManganese',
                    'max_manganese': 'maxManganese',
                    'min_phosphorus': 'minPhosphorus',
                    'max_phosphorus': 'maxPhosphorus',
                    'min_potassium': 'minPotassium',
                    'max_potassium': 'maxPotassium',
                    'min_selenium': 'minSelenium',
                    'max_selenium': 'maxSelenium',
                    'min_sodium': 'minSodium',
                    'max_sodium': 'maxSodium',
                    'min_sugar': 'minSugar',
                    'max_sugar': 'maxSugar',
                    'min_zinc': 'minZinc',
                    'max_zinc': 'maxZinc',
                    'offset': 'offset',
                    'number': 'number',
                    'random': 'random',
                    'limit_license': 'limitLicense',
                },
                'location_map': {
                    'min_carbs': 'query',
                    'max_carbs': 'query',
                    'min_protein': 'query',
                    'max_protein': 'query',
                    'min_calories': 'query',
                    'max_calories': 'query',
                    'min_fat': 'query',
                    'max_fat': 'query',
                    'min_alcohol': 'query',
                    'max_alcohol': 'query',
                    'min_caffeine': 'query',
                    'max_caffeine': 'query',
                    'min_copper': 'query',
                    'max_copper': 'query',
                    'min_calcium': 'query',
                    'max_calcium': 'query',
                    'min_choline': 'query',
                    'max_choline': 'query',
                    'min_cholesterol': 'query',
                    'max_cholesterol': 'query',
                    'min_fluoride': 'query',
                    'max_fluoride': 'query',
                    'min_saturated_fat': 'query',
                    'max_saturated_fat': 'query',
                    'min_vitamin_a': 'query',
                    'max_vitamin_a': 'query',
                    'min_vitamin_c': 'query',
                    'max_vitamin_c': 'query',
                    'min_vitamin_d': 'query',
                    'max_vitamin_d': 'query',
                    'min_vitamin_e': 'query',
                    'max_vitamin_e': 'query',
                    'min_vitamin_k': 'query',
                    'max_vitamin_k': 'query',
                    'min_vitamin_b1': 'query',
                    'max_vitamin_b1': 'query',
                    'min_vitamin_b2': 'query',
                    'max_vitamin_b2': 'query',
                    'min_vitamin_b5': 'query',
                    'max_vitamin_b5': 'query',
                    'min_vitamin_b3': 'query',
                    'max_vitamin_b3': 'query',
                    'min_vitamin_b6': 'query',
                    'max_vitamin_b6': 'query',
                    'min_vitamin_b12': 'query',
                    'max_vitamin_b12': 'query',
                    'min_fiber': 'query',
                    'max_fiber': 'query',
                    'min_folate': 'query',
                    'max_folate': 'query',
                    'min_folic_acid': 'query',
                    'max_folic_acid': 'query',
                    'min_iodine': 'query',
                    'max_iodine': 'query',
                    'min_iron': 'query',
                    'max_iron': 'query',
                    'min_magnesium': 'query',
                    'max_magnesium': 'query',
                    'min_manganese': 'query',
                    'max_manganese': 'query',
                    'min_phosphorus': 'query',
                    'max_phosphorus': 'query',
                    'min_potassium': 'query',
                    'max_potassium': 'query',
                    'min_selenium': 'query',
                    'max_selenium': 'query',
                    'min_sodium': 'query',
                    'max_sodium': 'query',
                    'min_sugar': 'query',
                    'max_sugar': 'query',
                    'min_zinc': 'query',
                    'max_zinc': 'query',
                    'offset': 'query',
                    'number': 'query',
                    'random': 'query',
                    'limit_license': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.summarize_recipe_endpoint = _Endpoint(
            settings={
                'response_type': (SummarizeRecipe200Response,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/summary',
                'operation_id': 'summarize_recipe',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.visualize_equipment_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/visualizeEquipment',
                'operation_id': 'visualize_equipment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'accept',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                    'accept',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "APPLICATION/X-WWW-FORM-URLENCODED": "application/x-www-form-urlencoded",
                        "APPLICATION/JSON": "application/json",
                        "MULTIPART/FORM-DATA": "multipart/form-data"
                    },
                    ('accept',): {

                        "APPLICATION/JSON": "application/json",
                        "TEXT/HTML": "text/html",
                        "MEDIA/*": "media/*"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'accept':
                        (str,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                    'accept': 'Accept',
                },
                'location_map': {
                    'content_type': 'header',
                    'accept': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.visualize_price_breakdown_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/visualizePriceEstimator',
                'operation_id': 'visualize_price_breakdown',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'accept',
                    'language',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                    'accept',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "APPLICATION/X-WWW-FORM-URLENCODED": "application/x-www-form-urlencoded",
                        "APPLICATION/JSON": "application/json",
                        "MULTIPART/FORM-DATA": "multipart/form-data"
                    },
                    ('accept',): {

                        "APPLICATION/JSON": "application/json",
                        "TEXT/HTML": "text/html",
                        "MEDIA/*": "media/*"
                    },
                    ('language',): {

                        "EN": "en",
                        "DE": "de"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'accept':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                    'accept': 'Accept',
                    'language': 'language',
                },
                'location_map': {
                    'content_type': 'header',
                    'accept': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.visualize_recipe_equipment_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/equipmentWidget',
                'operation_id': 'visualize_recipe_equipment_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'default_css',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'default_css':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'default_css': 'defaultCss',
                },
                'location_map': {
                    'id': 'path',
                    'default_css': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.visualize_recipe_ingredients_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/ingredientWidget',
                'operation_id': 'visualize_recipe_ingredients_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'default_css',
                    'measure',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'measure',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('measure',): {

                        "US": "us",
                        "METRIC": "metric"
                    },
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'default_css':
                        (bool,),
                    'measure':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'default_css': 'defaultCss',
                    'measure': 'measure',
                },
                'location_map': {
                    'id': 'path',
                    'default_css': 'query',
                    'measure': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.visualize_recipe_nutrition_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/visualizeNutrition',
                'operation_id': 'visualize_recipe_nutrition',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'accept',
                    'language',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                    'accept',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "APPLICATION/X-WWW-FORM-URLENCODED": "application/x-www-form-urlencoded",
                        "APPLICATION/JSON": "application/json",
                        "MULTIPART/FORM-DATA": "multipart/form-data"
                    },
                    ('accept',): {

                        "APPLICATION/JSON": "application/json",
                        "TEXT/HTML": "text/html",
                        "MEDIA/*": "media/*"
                    },
                    ('language',): {

                        "EN": "en",
                        "DE": "de"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'accept':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                    'accept': 'Accept',
                    'language': 'language',
                },
                'location_map': {
                    'content_type': 'header',
                    'accept': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.visualize_recipe_nutrition_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/nutritionWidget',
                'operation_id': 'visualize_recipe_nutrition_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'default_css',
                    'accept',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept',): {

                        "APPLICATION/JSON": "application/json",
                        "TEXT/HTML": "text/html",
                        "MEDIA/*": "media/*"
                    },
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'default_css':
                        (bool,),
                    'accept':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'default_css': 'defaultCss',
                    'accept': 'Accept',
                },
                'location_map': {
                    'id': 'path',
                    'default_css': 'query',
                    'accept': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.visualize_recipe_price_breakdown_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/priceBreakdownWidget',
                'operation_id': 'visualize_recipe_price_breakdown_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'default_css',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'default_css':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'default_css': 'defaultCss',
                },
                'location_map': {
                    'id': 'path',
                    'default_css': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.visualize_recipe_taste_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/visualizeTaste',
                'operation_id': 'visualize_recipe_taste',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'language',
                    'content_type',
                    'accept',
                    'normalize',
                    'rgb',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'language',
                    'content_type',
                    'accept',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('language',): {

                        "EN": "en",
                        "DE": "de"
                    },
                    ('content_type',): {

                        "APPLICATION/X-WWW-FORM-URLENCODED": "application/x-www-form-urlencoded",
                        "APPLICATION/JSON": "application/json",
                        "MULTIPART/FORM-DATA": "multipart/form-data"
                    },
                    ('accept',): {

                        "APPLICATION/JSON": "application/json",
                        "TEXT/HTML": "text/html",
                        "MEDIA/*": "media/*"
                    },
                },
                'openapi_types': {
                    'language':
                        (str,),
                    'content_type':
                        (str,),
                    'accept':
                        (str,),
                    'normalize':
                        (bool,),
                    'rgb':
                        (str,),
                },
                'attribute_map': {
                    'language': 'language',
                    'content_type': 'Content-Type',
                    'accept': 'Accept',
                    'normalize': 'normalize',
                    'rgb': 'rgb',
                },
                'location_map': {
                    'language': 'query',
                    'content_type': 'header',
                    'accept': 'header',
                    'normalize': 'query',
                    'rgb': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.visualize_recipe_taste_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKeyScheme'
                ],
                'endpoint_path': '/recipes/{id}/tasteWidget',
                'operation_id': 'visualize_recipe_taste_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'normalize',
                    'rgb',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'normalize',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('normalize',): {

                        "TRUE": True,
                        "FALSE": False
                    },
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'normalize':
                        (bool,),
                    'rgb':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'normalize': 'normalize',
                    'rgb': 'rgb',
                },
                'location_map': {
                    'id': 'path',
                    'normalize': 'query',
                    'rgb': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def analyze_a_recipe_search_query(
        self,
        q,
        **kwargs
    ):
        """Analyze a Recipe Search Query  # noqa: E501

        Parse a recipe search query to find out its intention.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.analyze_a_recipe_search_query(q, async_req=True)
        >>> result = thread.get()

        Args:
            q (str): The recipe search query.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AnalyzeARecipeSearchQuery200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['q'] = \
            q
        return self.analyze_a_recipe_search_query_endpoint.call_with_http_info(**kwargs)

    def analyze_recipe_instructions(
        self,
        **kwargs
    ):
        """Analyze Recipe Instructions  # noqa: E501

        This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.analyze_recipe_instructions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            content_type (str): The content type.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AnalyzeRecipeInstructions200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.analyze_recipe_instructions_endpoint.call_with_http_info(**kwargs)

    def autocomplete_recipe_search(
        self,
        **kwargs
    ):
        """Autocomplete Recipe Search  # noqa: E501

        Autocomplete a partial input to suggest possible recipe names.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.autocomplete_recipe_search(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            query (str): The (natural language) search query.. [optional]
            number (int): The maximum number of items to return (between 1 and 100). Defaults to 10.. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [AutocompleteRecipeSearch200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.autocomplete_recipe_search_endpoint.call_with_http_info(**kwargs)

    def classify_cuisine(
        self,
        **kwargs
    ):
        """Classify Cuisine  # noqa: E501

        Classify the recipe's cuisine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.classify_cuisine(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            content_type (str): The content type.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClassifyCuisine200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.classify_cuisine_endpoint.call_with_http_info(**kwargs)

    def compute_glycemic_load(
        self,
        compute_glycemic_load_request,
        **kwargs
    ):
        """Compute Glycemic Load  # noqa: E501

        Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_glycemic_load(compute_glycemic_load_request, async_req=True)
        >>> result = thread.get()

        Args:
            compute_glycemic_load_request (ComputeGlycemicLoadRequest):

        Keyword Args:
            language (str): The language of the input. Either 'en' or 'de'.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ComputeGlycemicLoad200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['compute_glycemic_load_request'] = \
            compute_glycemic_load_request
        return self.compute_glycemic_load_endpoint.call_with_http_info(**kwargs)

    def convert_amounts(
        self,
        ingredient_name,
        source_amount,
        source_unit,
        target_unit,
        **kwargs
    ):
        """Convert Amounts  # noqa: E501

        Convert amounts like \"2 cups of flour to grams\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.convert_amounts(ingredient_name, source_amount, source_unit, target_unit, async_req=True)
        >>> result = thread.get()

        Args:
            ingredient_name (str): The ingredient which you want to convert.
            source_amount (float): The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
            source_unit (str): The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
            target_unit (str): The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ConvertAmounts200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ingredient_name'] = \
            ingredient_name
        kwargs['source_amount'] = \
            source_amount
        kwargs['source_unit'] = \
            source_unit
        kwargs['target_unit'] = \
            target_unit
        return self.convert_amounts_endpoint.call_with_http_info(**kwargs)

    def create_recipe_card(
        self,
        **kwargs
    ):
        """Create Recipe Card  # noqa: E501

        Generate a recipe card for a recipe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_recipe_card(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            content_type (str): The content type.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CreateRecipeCard200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.create_recipe_card_endpoint.call_with_http_info(**kwargs)

    def equipment_by_id_image(
        self,
        id,
        **kwargs
    ):
        """Equipment by ID Image  # noqa: E501

        Visualize a recipe's equipment list as an image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.equipment_by_id_image(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The recipe id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.equipment_by_id_image_endpoint.call_with_http_info(**kwargs)

    def extract_recipe_from_website(
        self,
        url,
        **kwargs
    ):
        """Extract Recipe from Website  # noqa: E501

        This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.extract_recipe_from_website(url, async_req=True)
        >>> result = thread.get()

        Args:
            url (str): The URL of the recipe page.

        Keyword Args:
            force_extraction (bool): If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.. [optional]
            analyze (bool): If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.. [optional]
            include_nutrition (bool): Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.. [optional] if omitted the server will use the default value of False
            include_taste (bool): Whether taste data should be added to correctly parsed ingredients.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetRecipeInformation200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['url'] = \
            url
        return self.extract_recipe_from_website_endpoint.call_with_http_info(**kwargs)

    def get_analyzed_recipe_instructions(
        self,
        id,
        **kwargs
    ):
        """Get Analyzed Recipe Instructions  # noqa: E501

        Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_analyzed_recipe_instructions(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            step_breakdown (bool): Whether to break down the recipe steps even more.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetAnalyzedRecipeInstructions200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_analyzed_recipe_instructions_endpoint.call_with_http_info(**kwargs)

    def get_random_recipes(
        self,
        **kwargs
    ):
        """Get Random Recipes  # noqa: E501

        Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_random_recipes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            limit_license (bool): Whether the recipes should have an open license that allows display with proper attribution.. [optional] if omitted the server will use the default value of True
            tags (str): The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.. [optional]
            number (int): The maximum number of items to return (between 1 and 100). Defaults to 10.. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetRandomRecipes200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_random_recipes_endpoint.call_with_http_info(**kwargs)

    def get_recipe_equipment_by_id(
        self,
        id,
        **kwargs
    ):
        """Equipment by ID  # noqa: E501

        Get a recipe's equipment list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recipe_equipment_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetRecipeEquipmentByID200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_recipe_equipment_by_id_endpoint.call_with_http_info(**kwargs)

    def get_recipe_information(
        self,
        id,
        **kwargs
    ):
        """Get Recipe Information  # noqa: E501

        Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recipe_information(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            include_nutrition (bool): Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetRecipeInformation200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_recipe_information_endpoint.call_with_http_info(**kwargs)

    def get_recipe_information_bulk(
        self,
        ids,
        **kwargs
    ):
        """Get Recipe Information Bulk  # noqa: E501

        Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recipe_information_bulk(ids, async_req=True)
        >>> result = thread.get()

        Args:
            ids (str): A comma-separated list of recipe ids.

        Keyword Args:
            include_nutrition (bool): Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetRecipeInformationBulk200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ids'] = \
            ids
        return self.get_recipe_information_bulk_endpoint.call_with_http_info(**kwargs)

    def get_recipe_ingredients_by_id(
        self,
        id,
        **kwargs
    ):
        """Ingredients by ID  # noqa: E501

        Get a recipe's ingredient list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recipe_ingredients_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetRecipeIngredientsByID200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_recipe_ingredients_by_id_endpoint.call_with_http_info(**kwargs)

    def get_recipe_nutrition_widget_by_id(
        self,
        id,
        **kwargs
    ):
        """Nutrition by ID  # noqa: E501

        Get a recipe's nutrition data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recipe_nutrition_widget_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetRecipeNutritionWidgetByID200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_recipe_nutrition_widget_by_id_endpoint.call_with_http_info(**kwargs)

    def get_recipe_price_breakdown_by_id(
        self,
        id,
        **kwargs
    ):
        """Price Breakdown by ID  # noqa: E501

        Get a recipe's price breakdown data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recipe_price_breakdown_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetRecipePriceBreakdownByID200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_recipe_price_breakdown_by_id_endpoint.call_with_http_info(**kwargs)

    def get_recipe_taste_by_id(
        self,
        id,
        **kwargs
    ):
        """Taste by ID  # noqa: E501

        Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_recipe_taste_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            normalize (bool): Normalize to the strongest taste.. [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetRecipeTasteByID200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_recipe_taste_by_id_endpoint.call_with_http_info(**kwargs)

    def get_similar_recipes(
        self,
        id,
        **kwargs
    ):
        """Get Similar Recipes  # noqa: E501

        Find recipes which are similar to the given one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_similar_recipes(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            number (int): The maximum number of items to return (between 1 and 100). Defaults to 10.. [optional] if omitted the server will use the default value of 10
            limit_license (bool): Whether the recipes should have an open license that allows display with proper attribution.. [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetSimilarRecipes200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.get_similar_recipes_endpoint.call_with_http_info(**kwargs)

    def guess_nutrition_by_dish_name(
        self,
        title,
        **kwargs
    ):
        """Guess Nutrition by Dish Name  # noqa: E501

        Estimate the macronutrients of a dish based on its title.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.guess_nutrition_by_dish_name(title, async_req=True)
        >>> result = thread.get()

        Args:
            title (str): The title of the dish.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GuessNutritionByDishName200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['title'] = \
            title
        return self.guess_nutrition_by_dish_name_endpoint.call_with_http_info(**kwargs)

    def ingredients_by_id_image(
        self,
        id,
        **kwargs
    ):
        """Ingredients by ID Image  # noqa: E501

        Visualize a recipe's ingredient list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ingredients_by_id_image(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The recipe id.

        Keyword Args:
            measure (str): Whether the the measures should be 'us' or 'metric'.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.ingredients_by_id_image_endpoint.call_with_http_info(**kwargs)

    def parse_ingredients(
        self,
        **kwargs
    ):
        """Parse Ingredients  # noqa: E501

        Extract an ingredient from plain text.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.parse_ingredients(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            content_type (str): The content type.. [optional]
            language (str): The language of the input. Either 'en' or 'de'.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [ParseIngredients200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.parse_ingredients_endpoint.call_with_http_info(**kwargs)

    def price_breakdown_by_id_image(
        self,
        id,
        **kwargs
    ):
        """Price Breakdown by ID Image  # noqa: E501

        Visualize a recipe's price breakdown.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.price_breakdown_by_id_image(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The recipe id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.price_breakdown_by_id_image_endpoint.call_with_http_info(**kwargs)

    def quick_answer(
        self,
        q,
        **kwargs
    ):
        """Quick Answer  # noqa: E501

        Answer a nutrition related natural language question.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.quick_answer(q, async_req=True)
        >>> result = thread.get()

        Args:
            q (str): The nutrition related question.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            QuickAnswer200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['q'] = \
            q
        return self.quick_answer_endpoint.call_with_http_info(**kwargs)

    def recipe_nutrition_by_id_image(
        self,
        id,
        **kwargs
    ):
        """Recipe Nutrition by ID Image  # noqa: E501

        Visualize a recipe's nutritional information as an image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recipe_nutrition_by_id_image(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The recipe id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.recipe_nutrition_by_id_image_endpoint.call_with_http_info(**kwargs)

    def recipe_nutrition_label_image(
        self,
        id,
        **kwargs
    ):
        """Recipe Nutrition Label Image  # noqa: E501

        Get a recipe's nutrition label as an image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recipe_nutrition_label_image(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The recipe id.

        Keyword Args:
            show_optional_nutrients (bool): Whether to show optional nutrients.. [optional]
            show_zero_values (bool): Whether to show zero values.. [optional]
            show_ingredients (bool): Whether to show a list of ingredients.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.recipe_nutrition_label_image_endpoint.call_with_http_info(**kwargs)

    def recipe_nutrition_label_widget(
        self,
        id,
        **kwargs
    ):
        """Recipe Nutrition Label Widget  # noqa: E501

        Get a recipe's nutrition label as an HTML widget.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recipe_nutrition_label_widget(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The recipe id.

        Keyword Args:
            default_css (bool): Whether the default CSS should be added to the response.. [optional] if omitted the server will use the default value of True
            show_optional_nutrients (bool): Whether to show optional nutrients.. [optional]
            show_zero_values (bool): Whether to show zero values.. [optional]
            show_ingredients (bool): Whether to show a list of ingredients.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.recipe_nutrition_label_widget_endpoint.call_with_http_info(**kwargs)

    def recipe_taste_by_id_image(
        self,
        id,
        **kwargs
    ):
        """Recipe Taste by ID Image  # noqa: E501

        Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recipe_taste_by_id_image(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (float): The recipe id.

        Keyword Args:
            normalize (bool): Normalize to the strongest taste.. [optional]
            rgb (str): Red, green, blue values for the chart color.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.recipe_taste_by_id_image_endpoint.call_with_http_info(**kwargs)

    def search_recipes(
        self,
        **kwargs
    ):
        """Search Recipes  # noqa: E501

        Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_recipes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            query (str): The (natural language) search query.. [optional]
            cuisine (str): The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.. [optional]
            exclude_cuisine (str): The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.. [optional]
            diet (str): The diet for which the recipes must be suitable. See a full list of supported diets.. [optional]
            intolerances (str): A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.. [optional]
            equipment (str): The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".. [optional]
            include_ingredients (str): A comma-separated list of ingredients that should/must be used in the recipes.. [optional]
            exclude_ingredients (str): A comma-separated list of ingredients or ingredient types that the recipes must not contain.. [optional]
            type (str): The type of recipe. See a full list of supported meal types.. [optional]
            instructions_required (bool): Whether the recipes must have instructions.. [optional]
            fill_ingredients (bool): Add information about the ingredients and whether they are used or missing in relation to the query.. [optional]
            add_recipe_information (bool): If set to true, you get more information about the recipes returned.. [optional]
            add_recipe_nutrition (bool): If set to true, you get nutritional information about each recipes returned.. [optional]
            author (str): The username of the recipe author.. [optional]
            tags (str): The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.. [optional]
            recipe_box_id (float): The id of the recipe box to which the search should be limited to.. [optional]
            title_match (str): Enter text that must be found in the title of the recipes.. [optional]
            max_ready_time (float): The maximum time in minutes it should take to prepare and cook the recipe.. [optional]
            ignore_pantry (bool): Whether to ignore typical pantry items, such as water, salt, flour, etc.. [optional] if omitted the server will use the default value of False
            sort (str): The strategy to sort recipes by. See a full list of supported sorting options.. [optional]
            sort_direction (str): The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).. [optional]
            min_carbs (float): The minimum amount of carbohydrates in grams the recipe must have.. [optional]
            max_carbs (float): The maximum amount of carbohydrates in grams the recipe can have.. [optional]
            min_protein (float): The minimum amount of protein in grams the recipe must have.. [optional]
            max_protein (float): The maximum amount of protein in grams the recipe can have.. [optional]
            min_calories (float): The minimum amount of calories the recipe must have.. [optional]
            max_calories (float): The maximum amount of calories the recipe can have.. [optional]
            min_fat (float): The minimum amount of fat in grams the recipe must have.. [optional]
            max_fat (float): The maximum amount of fat in grams the recipe can have.. [optional]
            min_alcohol (float): The minimum amount of alcohol in grams the recipe must have.. [optional]
            max_alcohol (float): The maximum amount of alcohol in grams the recipe can have.. [optional]
            min_caffeine (float): The minimum amount of caffeine in milligrams the recipe must have.. [optional]
            max_caffeine (float): The maximum amount of caffeine in milligrams the recipe can have.. [optional]
            min_copper (float): The minimum amount of copper in milligrams the recipe must have.. [optional]
            max_copper (float): The maximum amount of copper in milligrams the recipe can have.. [optional]
            min_calcium (float): The minimum amount of calcium in milligrams the recipe must have.. [optional]
            max_calcium (float): The maximum amount of calcium in milligrams the recipe can have.. [optional]
            min_choline (float): The minimum amount of choline in milligrams the recipe must have.. [optional]
            max_choline (float): The maximum amount of choline in milligrams the recipe can have.. [optional]
            min_cholesterol (float): The minimum amount of cholesterol in milligrams the recipe must have.. [optional]
            max_cholesterol (float): The maximum amount of cholesterol in milligrams the recipe can have.. [optional]
            min_fluoride (float): The minimum amount of fluoride in milligrams the recipe must have.. [optional]
            max_fluoride (float): The maximum amount of fluoride in milligrams the recipe can have.. [optional]
            min_saturated_fat (float): The minimum amount of saturated fat in grams the recipe must have.. [optional]
            max_saturated_fat (float): The maximum amount of saturated fat in grams the recipe can have.. [optional]
            min_vitamin_a (float): The minimum amount of Vitamin A in IU the recipe must have.. [optional]
            max_vitamin_a (float): The maximum amount of Vitamin A in IU the recipe can have.. [optional]
            min_vitamin_c (float): The minimum amount of Vitamin C milligrams the recipe must have.. [optional]
            max_vitamin_c (float): The maximum amount of Vitamin C in milligrams the recipe can have.. [optional]
            min_vitamin_d (float): The minimum amount of Vitamin D in micrograms the recipe must have.. [optional]
            max_vitamin_d (float): The maximum amount of Vitamin D in micrograms the recipe can have.. [optional]
            min_vitamin_e (float): The minimum amount of Vitamin E in milligrams the recipe must have.. [optional]
            max_vitamin_e (float): The maximum amount of Vitamin E in milligrams the recipe can have.. [optional]
            min_vitamin_k (float): The minimum amount of Vitamin K in micrograms the recipe must have.. [optional]
            max_vitamin_k (float): The maximum amount of Vitamin K in micrograms the recipe can have.. [optional]
            min_vitamin_b1 (float): The minimum amount of Vitamin B1 in milligrams the recipe must have.. [optional]
            max_vitamin_b1 (float): The maximum amount of Vitamin B1 in milligrams the recipe can have.. [optional]
            min_vitamin_b2 (float): The minimum amount of Vitamin B2 in milligrams the recipe must have.. [optional]
            max_vitamin_b2 (float): The maximum amount of Vitamin B2 in milligrams the recipe can have.. [optional]
            min_vitamin_b5 (float): The minimum amount of Vitamin B5 in milligrams the recipe must have.. [optional]
            max_vitamin_b5 (float): The maximum amount of Vitamin B5 in milligrams the recipe can have.. [optional]
            min_vitamin_b3 (float): The minimum amount of Vitamin B3 in milligrams the recipe must have.. [optional]
            max_vitamin_b3 (float): The maximum amount of Vitamin B3 in milligrams the recipe can have.. [optional]
            min_vitamin_b6 (float): The minimum amount of Vitamin B6 in milligrams the recipe must have.. [optional]
            max_vitamin_b6 (float): The maximum amount of Vitamin B6 in milligrams the recipe can have.. [optional]
            min_vitamin_b12 (float): The minimum amount of Vitamin B12 in micrograms the recipe must have.. [optional]
            max_vitamin_b12 (float): The maximum amount of Vitamin B12 in micrograms the recipe can have.. [optional]
            min_fiber (float): The minimum amount of fiber in grams the recipe must have.. [optional]
            max_fiber (float): The maximum amount of fiber in grams the recipe can have.. [optional]
            min_folate (float): The minimum amount of folate in micrograms the recipe must have.. [optional]
            max_folate (float): The maximum amount of folate in micrograms the recipe can have.. [optional]
            min_folic_acid (float): The minimum amount of folic acid in micrograms the recipe must have.. [optional]
            max_folic_acid (float): The maximum amount of folic acid in micrograms the recipe can have.. [optional]
            min_iodine (float): The minimum amount of iodine in micrograms the recipe must have.. [optional]
            max_iodine (float): The maximum amount of iodine in micrograms the recipe can have.. [optional]
            min_iron (float): The minimum amount of iron in milligrams the recipe must have.. [optional]
            max_iron (float): The maximum amount of iron in milligrams the recipe can have.. [optional]
            min_magnesium (float): The minimum amount of magnesium in milligrams the recipe must have.. [optional]
            max_magnesium (float): The maximum amount of magnesium in milligrams the recipe can have.. [optional]
            min_manganese (float): The minimum amount of manganese in milligrams the recipe must have.. [optional]
            max_manganese (float): The maximum amount of manganese in milligrams the recipe can have.. [optional]
            min_phosphorus (float): The minimum amount of phosphorus in milligrams the recipe must have.. [optional]
            max_phosphorus (float): The maximum amount of phosphorus in milligrams the recipe can have.. [optional]
            min_potassium (float): The minimum amount of potassium in milligrams the recipe must have.. [optional]
            max_potassium (float): The maximum amount of potassium in milligrams the recipe can have.. [optional]
            min_selenium (float): The minimum amount of selenium in micrograms the recipe must have.. [optional]
            max_selenium (float): The maximum amount of selenium in micrograms the recipe can have.. [optional]
            min_sodium (float): The minimum amount of sodium in milligrams the recipe must have.. [optional]
            max_sodium (float): The maximum amount of sodium in milligrams the recipe can have.. [optional]
            min_sugar (float): The minimum amount of sugar in grams the recipe must have.. [optional]
            max_sugar (float): The maximum amount of sugar in grams the recipe can have.. [optional]
            min_zinc (float): The minimum amount of zinc in milligrams the recipe must have.. [optional]
            max_zinc (float): The maximum amount of zinc in milligrams the recipe can have.. [optional]
            offset (int): The number of results to skip (between 0 and 900).. [optional]
            number (int): The maximum number of items to return (between 1 and 100). Defaults to 10.. [optional] if omitted the server will use the default value of 10
            limit_license (bool): Whether the recipes should have an open license that allows display with proper attribution.. [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SearchRecipes200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.search_recipes_endpoint.call_with_http_info(**kwargs)

    def search_recipes_by_ingredients(
        self,
        **kwargs
    ):
        """Search Recipes by Ingredients  # noqa: E501

         Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_recipes_by_ingredients(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            ingredients (str): A comma-separated list of ingredients that the recipes should contain.. [optional]
            number (int): The maximum number of items to return (between 1 and 100). Defaults to 10.. [optional] if omitted the server will use the default value of 10
            limit_license (bool): Whether the recipes should have an open license that allows display with proper attribution.. [optional] if omitted the server will use the default value of True
            ranking (float): Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.. [optional]
            ignore_pantry (bool): Whether to ignore typical pantry items, such as water, salt, flour, etc.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [SearchRecipesByIngredients200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.search_recipes_by_ingredients_endpoint.call_with_http_info(**kwargs)

    def search_recipes_by_nutrients(
        self,
        **kwargs
    ):
        """Search Recipes by Nutrients  # noqa: E501

        Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_recipes_by_nutrients(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            min_carbs (float): The minimum amount of carbohydrates in grams the recipe must have.. [optional]
            max_carbs (float): The maximum amount of carbohydrates in grams the recipe can have.. [optional]
            min_protein (float): The minimum amount of protein in grams the recipe must have.. [optional]
            max_protein (float): The maximum amount of protein in grams the recipe can have.. [optional]
            min_calories (float): The minimum amount of calories the recipe must have.. [optional]
            max_calories (float): The maximum amount of calories the recipe can have.. [optional]
            min_fat (float): The minimum amount of fat in grams the recipe must have.. [optional]
            max_fat (float): The maximum amount of fat in grams the recipe can have.. [optional]
            min_alcohol (float): The minimum amount of alcohol in grams the recipe must have.. [optional]
            max_alcohol (float): The maximum amount of alcohol in grams the recipe can have.. [optional]
            min_caffeine (float): The minimum amount of caffeine in milligrams the recipe must have.. [optional]
            max_caffeine (float): The maximum amount of caffeine in milligrams the recipe can have.. [optional]
            min_copper (float): The minimum amount of copper in milligrams the recipe must have.. [optional]
            max_copper (float): The maximum amount of copper in milligrams the recipe can have.. [optional]
            min_calcium (float): The minimum amount of calcium in milligrams the recipe must have.. [optional]
            max_calcium (float): The maximum amount of calcium in milligrams the recipe can have.. [optional]
            min_choline (float): The minimum amount of choline in milligrams the recipe must have.. [optional]
            max_choline (float): The maximum amount of choline in milligrams the recipe can have.. [optional]
            min_cholesterol (float): The minimum amount of cholesterol in milligrams the recipe must have.. [optional]
            max_cholesterol (float): The maximum amount of cholesterol in milligrams the recipe can have.. [optional]
            min_fluoride (float): The minimum amount of fluoride in milligrams the recipe must have.. [optional]
            max_fluoride (float): The maximum amount of fluoride in milligrams the recipe can have.. [optional]
            min_saturated_fat (float): The minimum amount of saturated fat in grams the recipe must have.. [optional]
            max_saturated_fat (float): The maximum amount of saturated fat in grams the recipe can have.. [optional]
            min_vitamin_a (float): The minimum amount of Vitamin A in IU the recipe must have.. [optional]
            max_vitamin_a (float): The maximum amount of Vitamin A in IU the recipe can have.. [optional]
            min_vitamin_c (float): The minimum amount of Vitamin C in milligrams the recipe must have.. [optional]
            max_vitamin_c (float): The maximum amount of Vitamin C in milligrams the recipe can have.. [optional]
            min_vitamin_d (float): The minimum amount of Vitamin D in micrograms the recipe must have.. [optional]
            max_vitamin_d (float): The maximum amount of Vitamin D in micrograms the recipe can have.. [optional]
            min_vitamin_e (float): The minimum amount of Vitamin E in milligrams the recipe must have.. [optional]
            max_vitamin_e (float): The maximum amount of Vitamin E in milligrams the recipe can have.. [optional]
            min_vitamin_k (float): The minimum amount of Vitamin K in micrograms the recipe must have.. [optional]
            max_vitamin_k (float): The maximum amount of Vitamin K in micrograms the recipe can have.. [optional]
            min_vitamin_b1 (float): The minimum amount of Vitamin B1 in milligrams the recipe must have.. [optional]
            max_vitamin_b1 (float): The maximum amount of Vitamin B1 in milligrams the recipe can have.. [optional]
            min_vitamin_b2 (float): The minimum amount of Vitamin B2 in milligrams the recipe must have.. [optional]
            max_vitamin_b2 (float): The maximum amount of Vitamin B2 in milligrams the recipe can have.. [optional]
            min_vitamin_b5 (float): The minimum amount of Vitamin B5 in milligrams the recipe must have.. [optional]
            max_vitamin_b5 (float): The maximum amount of Vitamin B5 in milligrams the recipe can have.. [optional]
            min_vitamin_b3 (float): The minimum amount of Vitamin B3 in milligrams the recipe must have.. [optional]
            max_vitamin_b3 (float): The maximum amount of Vitamin B3 in milligrams the recipe can have.. [optional]
            min_vitamin_b6 (float): The minimum amount of Vitamin B6 in milligrams the recipe must have.. [optional]
            max_vitamin_b6 (float): The maximum amount of Vitamin B6 in milligrams the recipe can have.. [optional]
            min_vitamin_b12 (float): The minimum amount of Vitamin B12 in micrograms the recipe must have.. [optional]
            max_vitamin_b12 (float): The maximum amount of Vitamin B12 in micrograms the recipe can have.. [optional]
            min_fiber (float): The minimum amount of fiber in grams the recipe must have.. [optional]
            max_fiber (float): The maximum amount of fiber in grams the recipe can have.. [optional]
            min_folate (float): The minimum amount of folate in micrograms the recipe must have.. [optional]
            max_folate (float): The maximum amount of folate in micrograms the recipe can have.. [optional]
            min_folic_acid (float): The minimum amount of folic acid in micrograms the recipe must have.. [optional]
            max_folic_acid (float): The maximum amount of folic acid in micrograms the recipe can have.. [optional]
            min_iodine (float): The minimum amount of iodine in micrograms the recipe must have.. [optional]
            max_iodine (float): The maximum amount of iodine in micrograms the recipe can have.. [optional]
            min_iron (float): The minimum amount of iron in milligrams the recipe must have.. [optional]
            max_iron (float): The maximum amount of iron in milligrams the recipe can have.. [optional]
            min_magnesium (float): The minimum amount of magnesium in milligrams the recipe must have.. [optional]
            max_magnesium (float): The maximum amount of magnesium in milligrams the recipe can have.. [optional]
            min_manganese (float): The minimum amount of manganese in milligrams the recipe must have.. [optional]
            max_manganese (float): The maximum amount of manganese in milligrams the recipe can have.. [optional]
            min_phosphorus (float): The minimum amount of phosphorus in milligrams the recipe must have.. [optional]
            max_phosphorus (float): The maximum amount of phosphorus in milligrams the recipe can have.. [optional]
            min_potassium (float): The minimum amount of potassium in milligrams the recipe must have.. [optional]
            max_potassium (float): The maximum amount of potassium in milligrams the recipe can have.. [optional]
            min_selenium (float): The minimum amount of selenium in micrograms the recipe must have.. [optional]
            max_selenium (float): The maximum amount of selenium in micrograms the recipe can have.. [optional]
            min_sodium (float): The minimum amount of sodium in milligrams the recipe must have.. [optional]
            max_sodium (float): The maximum amount of sodium in milligrams the recipe can have.. [optional]
            min_sugar (float): The minimum amount of sugar in grams the recipe must have.. [optional]
            max_sugar (float): The maximum amount of sugar in grams the recipe can have.. [optional]
            min_zinc (float): The minimum amount of zinc in milligrams the recipe must have.. [optional]
            max_zinc (float): The maximum amount of zinc in milligrams the recipe can have.. [optional]
            offset (int): The number of results to skip (between 0 and 900).. [optional]
            number (int): The maximum number of items to return (between 1 and 100). Defaults to 10.. [optional] if omitted the server will use the default value of 10
            random (bool): If true, every request will give you a random set of recipes within the requested limits.. [optional]
            limit_license (bool): Whether the recipes should have an open license that allows display with proper attribution.. [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [SearchRecipesByNutrients200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.search_recipes_by_nutrients_endpoint.call_with_http_info(**kwargs)

    def summarize_recipe(
        self,
        id,
        **kwargs
    ):
        """Summarize Recipe  # noqa: E501

        Automatically generate a short description that summarizes key information about the recipe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.summarize_recipe(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SummarizeRecipe200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.summarize_recipe_endpoint.call_with_http_info(**kwargs)

    def visualize_equipment(
        self,
        **kwargs
    ):
        """Equipment Widget  # noqa: E501

        Visualize the equipment used to make a recipe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_equipment(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            content_type (str): The content type.. [optional]
            accept (str): Accept header.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.visualize_equipment_endpoint.call_with_http_info(**kwargs)

    def visualize_price_breakdown(
        self,
        **kwargs
    ):
        """Price Breakdown Widget  # noqa: E501

        Visualize the price breakdown of a recipe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_price_breakdown(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            content_type (str): The content type.. [optional]
            accept (str): Accept header.. [optional]
            language (str): The language of the input. Either 'en' or 'de'.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.visualize_price_breakdown_endpoint.call_with_http_info(**kwargs)

    def visualize_recipe_equipment_by_id(
        self,
        id,
        **kwargs
    ):
        """Equipment by ID Widget  # noqa: E501

        Visualize a recipe's equipment list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_recipe_equipment_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            default_css (bool): Whether the default CSS should be added to the response.. [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.visualize_recipe_equipment_by_id_endpoint.call_with_http_info(**kwargs)

    def visualize_recipe_ingredients_by_id(
        self,
        id,
        **kwargs
    ):
        """Ingredients by ID Widget  # noqa: E501

        Visualize a recipe's ingredient list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_recipe_ingredients_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            default_css (bool): Whether the default CSS should be added to the response.. [optional] if omitted the server will use the default value of True
            measure (str): Whether the the measures should be 'us' or 'metric'.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.visualize_recipe_ingredients_by_id_endpoint.call_with_http_info(**kwargs)

    def visualize_recipe_nutrition(
        self,
        **kwargs
    ):
        """Recipe Nutrition Widget  # noqa: E501

        Visualize a recipe's nutritional information as HTML including CSS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_recipe_nutrition(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            content_type (str): The content type.. [optional]
            accept (str): Accept header.. [optional]
            language (str): The language of the input. Either 'en' or 'de'.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.visualize_recipe_nutrition_endpoint.call_with_http_info(**kwargs)

    def visualize_recipe_nutrition_by_id(
        self,
        id,
        **kwargs
    ):
        """Recipe Nutrition by ID Widget  # noqa: E501

        Visualize a recipe's nutritional information as HTML including CSS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_recipe_nutrition_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            default_css (bool): Whether the default CSS should be added to the response.. [optional] if omitted the server will use the default value of True
            accept (str): Accept header.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.visualize_recipe_nutrition_by_id_endpoint.call_with_http_info(**kwargs)

    def visualize_recipe_price_breakdown_by_id(
        self,
        id,
        **kwargs
    ):
        """Price Breakdown by ID Widget  # noqa: E501

        Visualize a recipe's price breakdown.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_recipe_price_breakdown_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            default_css (bool): Whether the default CSS should be added to the response.. [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.visualize_recipe_price_breakdown_by_id_endpoint.call_with_http_info(**kwargs)

    def visualize_recipe_taste(
        self,
        **kwargs
    ):
        """Recipe Taste Widget  # noqa: E501

        Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_recipe_taste(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            language (str): The language of the input. Either 'en' or 'de'.. [optional]
            content_type (str): The content type.. [optional]
            accept (str): Accept header.. [optional]
            normalize (bool): Whether to normalize to the strongest taste.. [optional]
            rgb (str): Red, green, blue values for the chart color.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.visualize_recipe_taste_endpoint.call_with_http_info(**kwargs)

    def visualize_recipe_taste_by_id(
        self,
        id,
        **kwargs
    ):
        """Recipe Taste by ID Widget  # noqa: E501

        Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.visualize_recipe_taste_by_id(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): The item's id.

        Keyword Args:
            normalize (bool): Whether to normalize to the strongest taste.. [optional] if omitted the server will use the default value of True
            rgb (str): Red, green, blue values for the chart color.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.visualize_recipe_taste_by_id_endpoint.call_with_http_info(**kwargs)

